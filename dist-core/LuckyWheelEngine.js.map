{"version":3,"file":"LuckyWheelEngine.js","sources":["../src/src/core/LuckyWheelEngine.ts"],"sourcesContent":["/**幸运大转盘引擎 */\n\nimport {\n  WheelConfig,\n  SectorConfig,\n  ArrowConfig,\n  BorderConfig,\n  CenterButtonConfig,\n  CenterButtonArrowConfig,\n  CenterButtonAnimationConfig,\n  SectorTextConfig,\n  SectorContentImageConfig,\n} from \"./types\";\n\nexport class LuckyWheelEngine {\n  // 常量配置\n  private static readonly DEFAULTS = {\n    SPEED: 20,\n    ACCELERATION_TIME: 2500,\n    DECELERATION_TIME: 2500,\n    STOP_OFFSET_RANGE: 0.6,\n    TARGET_DIRECTION: 0,\n    FPS: 16.6,\n    ANIMATION_SPEED: 0.001,\n    MIN_SIZE: 100,\n    MAX_OFFSET_RATIO: 0.8,\n    ARROW_DISTANCE_OFFSET: 20,\n    WHEEL_BORDER_OFFSET: 20,\n    CENTER_BUTTON: {\n      DEFAULT_WIDTH: 20,\n      DEFAULT_HEIGHT: 20,\n      DEFAULT_COLOR: \"#fff\",\n      DEFAULT_ARROW_SIZE: 10,\n      DEFAULT_ARROW_COLOR: \"#333\"\n    },\n    ARROW: {\n      DEFAULT_SIZE: 15,\n      DEFAULT_COLOR: \"#333\",\n      DEFAULT_IMAGE_WIDTH: 30,\n      DEFAULT_IMAGE_HEIGHT: 30\n    },\n    SECTOR: {\n      DEFAULT_STROKE_WIDTH: 2,\n      DEFAULT_STROKE_COLOR: \"#fff\",\n      CONTENT_IMAGE: {\n        DEFAULT_WIDTH: 30,\n        DEFAULT_HEIGHT: 30,\n        DEFAULT_RADIUS: 0.5,\n        DEFAULT_OPACITY: 1\n      }\n    }\n  } as const;\n\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private config: WheelConfig;\n  private rotateDeg = 0;\n  private speed: number = LuckyWheelEngine.DEFAULTS.SPEED;\n  private accelerationTime: number = LuckyWheelEngine.DEFAULTS.ACCELERATION_TIME;\n  private decelerationTime: number = LuckyWheelEngine.DEFAULTS.DECELERATION_TIME;\n  private stopOffsetRange: number = LuckyWheelEngine.DEFAULTS.STOP_OFFSET_RANGE;\n  private targetDirection: number = LuckyWheelEngine.DEFAULTS.TARGET_DIRECTION;\n  private startTime = 0;\n  private endTime = 0;\n  private stopDeg = 0;\n  private endDeg = 0;\n  private prizeDeg = 0;\n  private FPS: number = LuckyWheelEngine.DEFAULTS.FPS;\n  private animationId?: number;\n  private continuousAnimationId?: number;\n  private onStopCallback?: (result: SectorConfig) => void;\n\n  // 图片加载状态 - 合并为统一的状态管理\n  private images = {\n    arrow: undefined as HTMLImageElement | undefined,\n    background: undefined as HTMLImageElement | undefined,\n    centerButtonBackground: undefined as HTMLImageElement | undefined,\n    centerButtonArrow: undefined as HTMLImageElement | undefined,\n    sectors: new Map<string, HTMLImageElement>(),\n    sectorContents: new Map<string, HTMLImageElement>()\n  };\n\n  private imageLoadStates = {\n    arrow: false,\n    background: false,\n    centerButtonBackground: false,\n    centerButtonArrow: false,\n    sectors: new Map<string, boolean>(),\n    sectorContents: new Map<string, boolean>()\n  };\n\n  private step: 0 | 1 | 2 | 3 = 0;\n  private prizeFlag: number | undefined;\n  private devicePixelRatio: number;\n  private onCenterButtonClickCallback?: () => void;\n  private centerButtonAnimationTime = 0;\n\n  constructor(canvas: HTMLCanvasElement, config: WheelConfig) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\")!;\n    this.config = config;\n    this.devicePixelRatio = window.devicePixelRatio || 1;\n\n    // 如果没有提供 size，默认撑满父元素\n    if (!this.config.size) {\n      this.config.size = this.getDefaultSize();\n    }\n\n    // 解决高DPI显示器模糊问题\n    this.setupHighDPICanvas(this.config.size);\n\n    this.stopOffsetRange = config.stopOffsetRange ?? LuckyWheelEngine.DEFAULTS.STOP_OFFSET_RANGE;\n    this.targetDirection = config.targetDirection ?? LuckyWheelEngine.DEFAULTS.TARGET_DIRECTION;\n    this.prizeDeg = 360 / config.sectors.length;\n\n    // 设置中心按钮鼠标样式\n    this.setupCenterButtonMouseEvents();\n\n    this.loadAllImages();\n    this.draw();\n\n    // 启动持续动画循环（用于中心按钮呼吸灯效果）\n    this.startContinuousAnimation();\n  }\n\n  /**\n   * 获取默认尺寸，撑满父元素\n   */\n  private getDefaultSize(): number {\n    const parent = this.canvas.parentElement;\n    if (!parent) {\n      // 如果没有父元素，返回默认值 300\n      return 300;\n    }\n\n    const parentRect = parent.getBoundingClientRect();\n    const canvasPadding = this.config.canvasPadding ?? 0;\n\n    // 获取父元素的可用尺寸（减去内边距）\n    const availableWidth = parentRect.width - canvasPadding * 2;\n    const availableHeight = parentRect.height - canvasPadding * 2;\n\n    // 使用较小的尺寸确保轮盘完全显示在父元素内\n    const minSize = Math.min(availableWidth, availableHeight);\n\n    // 确保最小尺寸不小于 100\n    return Math.max(minSize, 100);\n  }\n\n  /**\n   * 设置高DPI Canvas，解决模糊问题\n   */\n  private setupHighDPICanvas(size: number): void {\n    const canvasPadding = this.config.canvasPadding ?? 0;\n    const actualCanvasSize = size + canvasPadding * 2;\n\n    // 设置CSS显示尺寸\n    this.canvas.style.width = actualCanvasSize + \"px\";\n    this.canvas.style.height = actualCanvasSize + \"px\";\n\n    // 设置实际画布尺寸（考虑设备像素比）\n    this.canvas.width = Math.floor(actualCanvasSize * this.devicePixelRatio);\n    this.canvas.height = Math.floor(actualCanvasSize * this.devicePixelRatio);\n\n    // 缩放上下文以匹配设备像素比\n    this.ctx.scale(this.devicePixelRatio, this.devicePixelRatio);\n\n    // 启用图像平滑以获得更好的渲染质量\n    this.ctx.imageSmoothingEnabled = true;\n    this.ctx.imageSmoothingQuality = \"high\";\n  }\n\n  /**\n   * 设置中心按钮鼠标事件\n   */\n  private setupCenterButtonMouseEvents(): void {\n    this.canvas.addEventListener(\"mousemove\", (event) => {\n      if (this.isPointInCenterButton(event)) {\n        this.canvas.style.cursor = \"pointer\";\n      } else {\n        this.canvas.style.cursor = \"default\";\n      }\n    });\n\n    this.canvas.addEventListener(\"mouseleave\", () => {\n      this.canvas.style.cursor = \"default\";\n    });\n\n    // 添加点击事件监听\n    this.canvas.addEventListener(\"click\", (event) => {\n      if (this.isPointInCenterButton(event)) {\n        // 触发中心按钮点击回调\n        this.onCenterButtonClickCallback?.();\n\n        // 中心按钮点击：如果转盘静止则开始旋转\n        if (this.step === 0) {\n          this.start();\n        }\n      }\n    });\n  }\n\n  /**\n   * 检查鼠标位置是否在中心按钮内\n   */\n  private isPointInCenterButton(event: MouseEvent): boolean {\n    const centerButtonConfig = this.config.centerButton;\n    if (!centerButtonConfig || centerButtonConfig.visible === false) return false;\n\n    const rect = this.canvas.getBoundingClientRect();\n    const canvasPadding = this.config.canvasPadding ?? 0;\n    const actualCanvasSize = this.config.size! + canvasPadding * 2;\n    const x = event.clientX - rect.left - actualCanvasSize / 2;\n    const y = event.clientY - rect.top - actualCanvasSize / 2;\n\n    const buttonWidth = centerButtonConfig.width ?? 20;\n    const buttonHeight = centerButtonConfig.height ?? 20;\n\n    // 检查是否在椭圆/圆形内\n    const dx = x / (buttonWidth / 2);\n    const dy = y / (buttonHeight / 2);\n\n    return dx * dx + dy * dy <= 1;\n  }\n\n    // 优化的图片加载系统\n  private imageLoaders = [\n    {\n      name: 'background' as const,\n      getSrc: () => this.config.backgroundImage,\n      onLoad: (img: HTMLImageElement) => { this.images.background = img; },\n      onError: (src: string) => console.warn(\"背景图片加载失败:\", src),\n      setLoaded: (loaded: boolean) => { this.imageLoadStates.background = loaded; }\n    },\n    {\n      name: 'arrow' as const,\n      getSrc: () => this.config.arrow?.image,\n      onLoad: (img: HTMLImageElement) => { this.images.arrow = img; },\n      onError: (src: string) => console.warn(\"箭头图片加载失败:\", src),\n      setLoaded: (loaded: boolean) => { this.imageLoadStates.arrow = loaded; }\n    },\n    {\n      name: 'centerButtonBackground' as const,\n      getSrc: () => this.config.centerButton?.backgroundImage,\n      onLoad: (img: HTMLImageElement) => { this.images.centerButtonBackground = img; },\n      onError: (src: string) => console.warn(\"中心按钮背景图片加载失败:\", src),\n      setLoaded: (loaded: boolean) => { this.imageLoadStates.centerButtonBackground = loaded; }\n    },\n    {\n      name: 'centerButtonArrow' as const,\n      getSrc: () => this.config.centerButton?.arrow?.image,\n      onLoad: (img: HTMLImageElement) => { this.images.centerButtonArrow = img; },\n      onError: (src: string) => console.warn(\"中心按钮箭头图片加载失败:\", src),\n      setLoaded: (loaded: boolean) => { this.imageLoadStates.centerButtonArrow = loaded; }\n    }\n  ];\n\n  private loadAllImages(): void {\n    // 加载单个图片\n    this.imageLoaders.forEach(loader => this.loadSingleImage(loader));\n\n    // 加载扇形相关图片\n    this.loadSectorImages();\n    this.loadSectorContentImages();\n  }\n\n  private loadSingleImage(loader: typeof this.imageLoaders[0]): void {\n    const src = loader.getSrc();\n    loader.setLoaded(!src);\n\n    this.loadImage(\n      src,\n      (img) => {\n        loader.onLoad(img);\n        loader.setLoaded(true);\n        this.draw();\n      },\n      (srcString) => {\n        loader.onError(srcString);\n        loader.setLoaded(true);\n        this.draw();\n      }\n    );\n  }\n\n  private loadImage(\n    src: string | HTMLImageElement | undefined,\n    onLoad: (img: HTMLImageElement) => void,\n    onError?: (error: string) => void\n  ): void {\n    if (!src) return;\n\n    if (src instanceof HTMLImageElement) {\n      onLoad(src);\n      return;\n    }\n\n    const img = new Image();\n    img.onload = () => onLoad(img);\n    img.onerror = () => {\n      onError?.(typeof src === \"string\" ? src : \"Unknown image source\");\n    };\n    img.src = src;\n  }\n\n  private loadMapImages<T>(\n    getItems: () => T[],\n    getImageSrc: (item: T) => string | HTMLImageElement | undefined,\n    getItemId: (item: T) => string,\n    imageMap: Map<string, HTMLImageElement>,\n    loadedMap: Map<string, boolean>,\n    errorPrefix: string\n  ): void {\n    getItems().forEach((item) => {\n      const src = getImageSrc(item);\n      const id = getItemId(item);\n\n      if (!src) {\n        loadedMap.set(id, true);\n        return;\n      }\n\n      loadedMap.set(id, false);\n      this.loadImage(\n        src,\n        (img) => {\n          imageMap.set(id, img);\n          loadedMap.set(id, true);\n          this.draw();\n        },\n        (srcString) => {\n          console.warn(`${errorPrefix}[${id}]:`, srcString);\n          loadedMap.set(id, true);\n          this.draw();\n        }\n      );\n    });\n  }\n\n  private loadSectorImages(): void {\n    this.loadMapImages(\n      () => this.config.sectors,\n      (sector) => sector.image?.url,\n      (sector) => sector.id,\n      this.images.sectors,\n      this.imageLoadStates.sectors,\n      \"扇形图片加载失败\"\n    );\n  }\n\n  private loadSectorContentImages(): void {\n    this.loadMapImages(\n      () => this.config.sectors,\n      (sector) => sector.contentImage?.url,\n      (sector) => sector.id,\n      this.images.sectorContents,\n      this.imageLoadStates.sectorContents,\n      \"扇形内容图片加载失败\"\n    );\n  }\n\n  // 重新加载特定类型的图片\n  private reloadImageByName(name: string): void {\n    const loader = this.imageLoaders.find(l => l.name === name);\n    if (loader) this.loadSingleImage(loader);\n  }\n\n  private loadArrowImage = () => this.reloadImageByName('arrow');\n  private loadCenterButtonBackgroundImage = () => this.reloadImageByName('centerButtonBackground');\n  private loadCenterButtonArrowImage = () => this.reloadImageByName('centerButtonArrow');\n\n  /**\n   * 获取动画配置\n   */\n  private getAnimationConfig(): { enabled: boolean; speed: number; scale: number } {\n    const centerButtonConfig = this.config.centerButton;\n    if (!centerButtonConfig) {\n      return { enabled: false, speed: LuckyWheelEngine.DEFAULTS.ANIMATION_SPEED, scale: 0.1 };\n    }\n\n    const animation = centerButtonConfig.animation;\n\n    if (animation === false) {\n      return { enabled: false, speed: LuckyWheelEngine.DEFAULTS.ANIMATION_SPEED, scale: 0.1 };\n    }\n\n    if (animation === true || animation === undefined) {\n      return { enabled: true, speed: LuckyWheelEngine.DEFAULTS.ANIMATION_SPEED, scale: 0.1 };\n    }\n\n    // animation 是 CenterButtonAnimationConfig 对象\n    return {\n      enabled: animation.enabled !== false,\n      speed: animation.speed ?? LuckyWheelEngine.DEFAULTS.ANIMATION_SPEED,\n      scale: animation.scale ?? 0.1,\n    };\n  }\n\n  /**\n   * 启动持续动画循环（用于中心按钮呼吸灯效果）\n   */\n  private startContinuousAnimation(): void {\n    const animateFrame = () => {\n      // 获取动画配置\n      const animationConfig = this.getAnimationConfig();\n\n      // 更新中心按钮动画时间\n      this.centerButtonAnimationTime += animationConfig.speed * 16.6; // 假设60FPS\n\n      // 只有当中心按钮可见且开启动画时才重绘\n      const centerButtonConfig = this.config.centerButton;\n      if (centerButtonConfig?.visible !== false && animationConfig.enabled) {\n        this.draw();\n      }\n\n      this.continuousAnimationId = requestAnimationFrame(animateFrame);\n    };\n\n    animateFrame();\n  }\n\n  /**\n   * 停止持续动画循环\n   */\n  private stopContinuousAnimation(): void {\n    if (this.continuousAnimationId) {\n      cancelAnimationFrame(this.continuousAnimationId);\n      this.continuousAnimationId = undefined;\n    }\n  }\n\n  // ========== 公共方法 ==========\n\n  start(): void {\n    if (this.step !== 0) return;\n    this.startTime = Date.now();\n    this.prizeFlag = undefined;\n    this.step = 1;\n    this.run();\n  }\n\n  stop(targetId?: string, onStop?: (result: SectorConfig) => void): void {\n    if (this.step === 0 || this.step === 3) return;\n\n    this.onStopCallback = onStop;\n    targetId = targetId || this.getRandomSectorId();\n\n    const targetIndex = this.config.sectors.findIndex((s) => s.id === targetId);\n    if (targetIndex === -1) {\n      this.step = 0;\n      this.prizeFlag = -1;\n      return;\n    }\n\n    this.step = 2;\n    this.prizeFlag = targetIndex;\n  }\n\n  /**\n   * 设置中心按钮点击回调函数\n   */\n  setCenterButtonClickCallback(callback?: () => void): void {\n    this.onCenterButtonClickCallback = callback;\n  }\n\n  // ========== 配置方法 ==========\n\n  private updateConfig<T>(configPath: string, updates: Partial<T>, callback?: () => void): void {\n    const keys = configPath.split(\".\");\n    let current: any = this.config;\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      if (!current[keys[i]]) current[keys[i]] = {};\n      current = current[keys[i]];\n    }\n\n    const lastKey = keys[keys.length - 1];\n    current[lastKey] = { ...current[lastKey], ...updates };\n\n    callback?.();\n    this.draw();\n  }\n\n  // 通用配置更新方法 - 减少重复代码\n  private createConfigSetter<T>(\n    configPath: string,\n    validator?: (value: T) => T,\n    onUpdate?: () => void\n  ) {\n    return (updates: Partial<T>) => {\n      if (validator && typeof updates === 'object') {\n        Object.keys(updates).forEach(key => {\n          const value = (updates as any)[key];\n          if (value !== undefined) {\n            (updates as any)[key] = validator(value);\n          }\n        });\n      }\n      this.updateConfig(configPath, updates, onUpdate);\n    };\n  }\n\n  // 简化后的配置方法\n  setStopOffsetRange = (range: number) => {\n    this.stopOffsetRange = Math.max(0, Math.min(1, range));\n  };\n\n  setTargetDirection = (direction: number) => {\n    this.targetDirection = ((direction % 360) + 360) % 360;\n    this.draw();\n  };\n\n  // 箭头配置 - 使用统一的配置更新\n  setArrowConfig = this.createConfigSetter<ArrowConfig>(\"arrow\", undefined, () => {\n    // 重新加载箭头图片如果图片配置发生变化\n    if (this.config.arrow?.image !== undefined) {\n      this.imageLoadStates.arrow = false;\n      this.loadArrowImage();\n    }\n  });\n\n  setArrowDistance = (distance: number) => this.setArrowConfig({ distance: Math.max(0, distance) });\n\n  // 边框配置\n  setBorderConfig = this.createConfigSetter<BorderConfig>(\"border\");\n  setBorderWidth = (width: number) => this.setBorderConfig({ width: Math.max(0, width) });\n  setBorderColor = (color: string) => this.setBorderConfig({ color });\n  setBorderStyle = (style: \"solid\" | \"dashed\" | \"dotted\") => this.setBorderConfig({ style });\n\n  // 内边距配置\n  setInnerPadding = (padding: number) => {\n    this.config.innerPadding = Math.max(0, padding);\n    this.draw();\n  };\n\n  // 扇形描边配置\n  setSectorStrokeConfig = this.createConfigSetter<{ width?: number; color?: string }>(\"sectorStroke\");\n  setSectorStrokeWidth = (width: number) => this.setSectorStrokeConfig({ width: Math.max(0, width) });\n  setSectorStrokeColor = (color: string) => this.setSectorStrokeConfig({ color });\n\n  // 中心按钮配置\n  setCenterButtonConfig = this.createConfigSetter<CenterButtonConfig>(\"centerButton\", undefined, () => {\n    // 重新加载中心按钮图片\n    if (this.config.centerButton?.backgroundImage !== undefined) {\n      this.imageLoadStates.centerButtonBackground = false;\n      this.loadCenterButtonBackgroundImage();\n    }\n    if (this.config.centerButton?.arrow?.image !== undefined) {\n      this.imageLoadStates.centerButtonArrow = false;\n      this.loadCenterButtonArrowImage();\n    }\n  });\n\n  setCenterButtonAnimation = (enabled: boolean) => this.setCenterButtonConfig({ animation: enabled });\n  setCenterButtonAnimationConfig = (animationConfig: CenterButtonAnimationConfig) =>\n    this.setCenterButtonConfig({ animation: animationConfig });\n\n  setCenterButtonAnimationSpeed = (speed: number) => {\n    const currentConfig = this.getAnimationConfig();\n    this.setCenterButtonAnimationConfig({\n      enabled: currentConfig.enabled,\n      speed: Math.max(0, speed),\n      scale: currentConfig.scale,\n    });\n  };\n\n  setCenterButtonAnimationScale = (scale: number) => {\n    const currentConfig = this.getAnimationConfig();\n    this.setCenterButtonAnimationConfig({\n      enabled: currentConfig.enabled,\n      speed: currentConfig.speed,\n      scale: Math.max(0, Math.min(1, scale)),\n    });\n  };\n\n  // 文本配置方法 - 优化版本\n  private findSector(sectorId: string) {\n    const sector = this.config.sectors.find((s) => s.id === sectorId);\n    if (!sector) {\n      console.warn(`找不到ID为 ${sectorId} 的扇形`);\n    }\n    return sector;\n  }\n\n    private createSectorConfigSetter<T extends Record<string, any>>(\n    configKey: keyof SectorConfig,\n    validator?: (value: any) => any\n  ) {\n    return (sectorId: string, updates: Partial<T>) => {\n      const sector = this.findSector(sectorId);\n      if (!sector) return;\n\n      const currentConfig = (sector[configKey] as T) || ({} as T);\n      const validatedUpdates = validator && typeof updates === 'object'\n        ? Object.fromEntries(\n            Object.entries(updates).map(([key, value]) => [\n              key,\n              validator(value)\n            ])\n          )\n        : updates;\n\n      (sector[configKey] as T) = { ...currentConfig, ...validatedUpdates } as T;\n      this.draw();\n    };\n  }\n\n  // 扇形文本配置 - 使用优化的方法\n  setSectorTextConfig = this.createSectorConfigSetter<SectorTextConfig>('textConfig');\n\n  setBatchSectorTextConfig = (configs: Array<{ sectorId: string; config: SectorTextConfig }>) => {\n    configs.forEach(({ sectorId, config }) => this.setSectorTextConfig(sectorId, config));\n  };\n\n  getSectorTextConfigById = (sectorId: string) => this.findSector(sectorId)?.textConfig;\n\n  resetSectorTextConfig = (sectorId: string) => {\n    const sector = this.findSector(sectorId);\n    if (sector) {\n      sector.textConfig = undefined;\n      this.draw();\n    }\n  };\n\n  // 简化的单属性设置方法\n  setSectorTextFontSize = (sectorId: string, fontSize: number) =>\n    this.setSectorTextConfig(sectorId, { fontSize: Math.max(1, fontSize) });\n\n  setSectorTextColor = (sectorId: string, color: string) =>\n    this.setSectorTextConfig(sectorId, { color });\n\n  setSectorTextLineHeight = (sectorId: string, lineHeight: number) =>\n    this.setSectorTextConfig(sectorId, { lineHeight: Math.max(1, lineHeight) });\n\n  setSectorTextMaxLines = (sectorId: string, maxLines: number) =>\n    this.setSectorTextConfig(sectorId, { maxLines: Math.max(1, maxLines) });\n\n  setSectorTextDirection = (sectorId: string, direction: \"horizontal\" | \"vertical\") =>\n    this.setSectorTextConfig(sectorId, { direction });\n\n  setSectorTextOffset = (sectorId: string, offsetX: number, offsetY: number) =>\n    this.setSectorTextConfig(sectorId, {\n      offsetX: Math.max(-1, Math.min(1, offsetX)),\n      offsetY: Math.max(-1, Math.min(1, offsetY)),\n    });\n\n  setSectorTextAlign = (sectorId: string, textAlign: \"left\" | \"center\" | \"right\") =>\n    this.setSectorTextConfig(sectorId, { textAlign });\n\n  setSectorTextFont = (sectorId: string, fontFamily: string, fontWeight?: string) => {\n    const config: SectorTextConfig = { fontFamily };\n    if (fontWeight) config.fontWeight = fontWeight;\n    this.setSectorTextConfig(sectorId, config);\n  };\n\n  setSectorTextRadius = (sectorId: string, textRadius: number) =>\n    this.setSectorTextConfig(sectorId, { textRadius: Math.max(0.1, Math.min(1, textRadius)) });\n\n  // 内容图片配置方法 - 优化版本\n  setSectorContentImageConfig = (sectorId: string, imageConfig: Partial<SectorContentImageConfig>) => {\n    const sector = this.findSector(sectorId);\n    if (!sector) return;\n\n    if (!sector.contentImage && imageConfig.url) {\n      sector.contentImage = { url: imageConfig.url, ...imageConfig };\n    } else if (sector.contentImage) {\n      Object.assign(sector.contentImage, imageConfig);\n    } else {\n      console.warn(`扇形 ${sectorId} 需要先设置图片URL`);\n      return;\n    }\n\n    if (imageConfig.url) {\n      this.imageLoadStates.sectorContents.set(sectorId, false);\n      this.loadSectorContentImages();\n    }\n\n    this.draw();\n  };\n\n  setSectorContentImage = (sectorId: string, imageUrl: string | HTMLImageElement, options?: {\n    width?: number;\n    height?: number;\n    offsetX?: number;\n    offsetY?: number;\n    imageRadius?: number;\n    rotation?: number;\n    opacity?: number;\n  }) => this.setSectorContentImageConfig(sectorId, { url: imageUrl, ...options });\n\n  removeSectorContentImage = (sectorId: string) => {\n    const sector = this.findSector(sectorId);\n    if (!sector) return;\n\n    sector.contentImage = undefined;\n    this.images.sectorContents.delete(sectorId);\n    this.imageLoadStates.sectorContents.set(sectorId, true);\n    this.draw();\n  };\n\n  // 简化的单属性设置方法\n  setSectorContentImageSize = (sectorId: string, width: number, height: number) =>\n    this.setSectorContentImageConfig(sectorId, {\n      width: Math.max(1, width),\n      height: Math.max(1, height)\n    });\n\n  setSectorContentImageOffset = (sectorId: string, offsetX: number, offsetY: number) =>\n    this.setSectorContentImageConfig(sectorId, {\n      offsetX: Math.max(-1, Math.min(1, offsetX)),\n      offsetY: Math.max(-1, Math.min(1, offsetY)),\n    });\n\n  setSectorContentImageRadius = (sectorId: string, imageRadius: number) =>\n    this.setSectorContentImageConfig(sectorId, {\n      imageRadius: Math.max(0.1, Math.min(1, imageRadius))\n    });\n\n  setSectorContentImageRotation = (sectorId: string, rotation: number) =>\n    this.setSectorContentImageConfig(sectorId, { rotation });\n\n  setSectorContentImageOpacity = (sectorId: string, opacity: number) =>\n    this.setSectorContentImageConfig(sectorId, {\n      opacity: Math.max(0, Math.min(1, opacity))\n    });\n\n  setSectorContentImageVisible = (sectorId: string, visible: boolean) =>\n    this.setSectorContentImageConfig(sectorId, { visible });\n\n  private run(frameCount: number = 0): void {\n    if (this.step === 0) {\n      if (this.prizeFlag !== undefined && this.prizeFlag >= 0) {\n        const result = this.config.sectors[this.prizeFlag];\n        this.onStopCallback?.(result);\n      }\n      return;\n    }\n\n    if (this.prizeFlag === -1) return;\n\n    if (this.step === 3 && !this.endDeg) {\n      this.carveOnGunwaleOfAMovingBoat();\n    }\n\n    const startInterval = Date.now() - this.startTime;\n    const endInterval = Date.now() - this.endTime;\n    let rotateDeg = this.rotateDeg;\n\n    if (this.step === 1 || startInterval < this.accelerationTime) {\n      this.FPS = startInterval / frameCount;\n      const currSpeed = this.quadEaseIn(startInterval, 0, this.speed, this.accelerationTime);\n\n      if (currSpeed === this.speed) {\n        this.step = 2;\n      }\n      rotateDeg = rotateDeg + (currSpeed % 360);\n    } else if (this.step === 2) {\n      rotateDeg = rotateDeg + (this.speed % 360);\n\n      if (this.prizeFlag !== undefined && this.prizeFlag >= 0) {\n        this.step = 3;\n        this.stopDeg = 0;\n        this.endDeg = 0;\n      }\n    } else if (this.step === 3) {\n      rotateDeg = this.quadEaseOut(endInterval, this.stopDeg, this.endDeg, this.decelerationTime);\n\n      if (endInterval >= this.decelerationTime) {\n        this.step = 0;\n      }\n    }\n\n    this.rotateDeg = rotateDeg;\n    this.draw();\n    this.animationId = requestAnimationFrame(() => this.run(frameCount + 1));\n  }\n\n  private carveOnGunwaleOfAMovingBoat(): void {\n    const { prizeFlag, prizeDeg, rotateDeg } = this;\n    this.endTime = Date.now();\n    const stopDeg = (this.stopDeg = rotateDeg);\n    const speed = this.speed;\n\n    const maxOffsetRatio = 0.8;\n    const randomOffset = (Math.random() * 2 - 1) * this.stopOffsetRange;\n    const stopRange = (randomOffset * prizeDeg * maxOffsetRatio) / 2;\n    let i = 0,\n      prevSpeed = 0,\n      prevDeg = 0;\n\n    while (++i) {\n      const endDeg = 360 * i - prizeFlag! * prizeDeg - rotateDeg + stopRange - prizeDeg / 2;\n\n      let currSpeed = this.quadEaseOut(this.FPS, stopDeg, endDeg, this.decelerationTime) - stopDeg;\n\n      if (currSpeed > speed) {\n        this.endDeg = speed - prevSpeed > currSpeed - speed ? endDeg : prevDeg;\n        break;\n      }\n\n      prevDeg = endDeg;\n      prevSpeed = currSpeed;\n    }\n  }\n\n  /**\n   * 二次缓动 - 加速\n   */\n  private quadEaseIn(t: number, b: number, c: number, d: number): number {\n    return c * (t /= d) * t + b;\n  }\n\n  /**\n   * 二次缓动 - 减速\n   */\n  private quadEaseOut(t: number, b: number, c: number, d: number): number {\n    return -c * (t /= d) * (t - 2) + b;\n  }\n\n  private draw(): void {\n    const size = this.config.size!;\n    const canvasPadding = this.config.canvasPadding ?? 0;\n    const actualCanvasSize = size + canvasPadding * 2;\n    const centerX = actualCanvasSize / 2;\n    const centerY = actualCanvasSize / 2;\n    const borderWidth = this.config.border?.width ?? 0;\n    const innerPadding = this.config.innerPadding ?? 0;\n\n    // 完整半径（用于背景图和边框）\n    const fullRadius = size / 2 - borderWidth / 2;\n    // 扇形半径（减去内边距）\n    const sectorRadius = fullRadius - innerPadding;\n\n    this.ctx.clearRect(0, 0, actualCanvasSize, actualCanvasSize);\n\n    this.ctx.save();\n    this.ctx.translate(centerX, centerY);\n\n    // 绘制轮盘背景图片（如果有的话）- 使用完整半径，在扇形之前绘制\n    this.drawBackgroundImage(fullRadius);\n\n    const adjustedRotation = this.rotateDeg - 90 + this.prizeDeg / 2 + this.targetDirection;\n    this.ctx.rotate((adjustedRotation * Math.PI) / 180);\n\n    const sectorAngle = (Math.PI * 2) / this.config.sectors.length;\n\n    this.config.sectors.forEach((sector, index) => {\n      const startAngle = index * sectorAngle - sectorAngle / 2;\n      const endAngle = startAngle + sectorAngle;\n\n      // 使用减去内边距后的半径绘制扇形\n      this.drawSector(sector, startAngle, endAngle, sectorRadius);\n    });\n\n    // 统一绘制扇形分割线，避免相邻扇形描边互相覆盖\n    this.drawSectorDividers(sectorAngle, sectorRadius);\n\n    this.ctx.restore();\n\n    // 绘制转盘边框 - 使用完整半径\n    this.drawWheelBorder(centerX, centerY, fullRadius);\n\n    // 绘制箭头\n    this.drawArrow(centerX, centerY);\n\n    // 绘制中心按钮\n    this.drawCenterButton(centerX, centerY);\n  }\n\n  private drawBackgroundImage(radius: number): void {\n    if (!this.images.background || !this.imageLoadStates.background) return;\n\n    this.ctx.save();\n\n    // 创建圆形剪切路径，限制背景图只在轮盘圆形区域内显示\n    this.ctx.beginPath();\n    this.ctx.arc(0, 0, radius, 0, Math.PI * 2);\n    this.ctx.clip();\n\n    // 计算图片绘制参数，让图片撑满整个圆形区域\n    const diameter = radius * 2;\n\n    this.ctx.drawImage(\n      this.images.background,\n      -radius, // x: 从圆心向左偏移半径\n      -radius, // y: 从圆心向上偏移半径\n      diameter, // width: 直径\n      diameter // height: 直径\n    );\n\n    this.ctx.restore();\n  }\n\n  private drawSector(sector: SectorConfig, startAngle: number, endAngle: number, radius: number): void {\n    // 1. 绘制扇形颜色\n    this.ctx.beginPath();\n    this.ctx.arc(0, 0, radius, startAngle, endAngle);\n    this.ctx.lineTo(0, 0);\n    this.ctx.fillStyle = sector.color;\n    this.ctx.fill();\n\n    // 2. 绘制扇形背景图片（如果有的话）\n    this.drawSectorImage(sector, startAngle, endAngle, radius);\n\n    // 3. 绘制扇形内容图片（如果有的话）\n    this.drawSectorContentImage(sector, startAngle, endAngle, radius);\n\n    // 4. 绘制文字（横向展示，支持换行和溢出隐藏）\n    this.drawSectorText(sector, startAngle, endAngle, radius);\n  }\n\n  /**\n   * 获取扇形文本的默认配置\n   */\n  private getDefaultTextConfig(): Required<SectorTextConfig> {\n    return {\n      fontSize: 14,\n      color: \"#fff\",\n      lineHeight: 16,\n      maxLines: 2,\n      direction: \"horizontal\",\n      offsetX: 0,\n      offsetY: 0,\n      textAlign: \"center\",\n      fontFamily: \"Arial\",\n      fontWeight: \"normal\",\n      textRadius: 0.65,\n    };\n  }\n\n  /**\n   * 获取扇形的完整文本配置（合并默认配置和自定义配置）\n   */\n  private getSectorTextConfig(sector: SectorConfig): Required<SectorTextConfig> {\n    const defaultConfig = this.getDefaultTextConfig();\n    return { ...defaultConfig, ...sector.textConfig };\n  }\n\n  /**\n   * 绘制扇形文字（支持横向/纵向、换行、溢出隐藏、自定义位置）\n   */\n  private drawSectorText(sector: SectorConfig, startAngle: number, endAngle: number, radius: number): void {\n    if (!sector.text) return;\n\n    const textConfig = this.getSectorTextConfig(sector);\n    const sectorAngle = endAngle - startAngle;\n    const centerAngle = startAngle + sectorAngle / 2;\n\n    this.ctx.save();\n\n    // 设置文本样式\n    this.ctx.fillStyle = textConfig.color;\n    this.ctx.font = `${textConfig.fontWeight} ${textConfig.fontSize}px ${textConfig.fontFamily}`;\n    this.ctx.textBaseline = \"middle\";\n\n    // 计算基础文本位置（扇形中心）\n    const baseTextRadius = radius * textConfig.textRadius;\n    const baseCenterX = Math.cos(centerAngle) * baseTextRadius;\n    const baseCenterY = Math.sin(centerAngle) * baseTextRadius;\n\n    // 移动到扇形文本基础位置\n    this.ctx.translate(baseCenterX, baseCenterY);\n\n    // 根据文本方向设置旋转\n    if (textConfig.direction === \"horizontal\") {\n      // 横向：垂直于径向（弦向）\n      this.ctx.rotate(centerAngle + Math.PI / 2);\n    } else {\n      // 纵向：沿径向\n      this.ctx.rotate(centerAngle);\n    }\n\n        // 计算精确的偏移量（基于文本实际位置）\n\n    // 计算文本位置处的可用空间\n    const textChordLength = 2 * baseTextRadius * Math.sin(sectorAngle / 2); // 文本位置处的弦长\n\n    // 计算最大偏移（让offset=±1时能到达合理边界）\n    const textMargin = Math.max(textConfig.fontSize / 4, 2); // 基于字体大小的边距\n    const maxChordOffset = textChordLength / 2 - textMargin; // 弦向最大偏移\n\n    // 径向偏移：基于文本位置到边界的实际距离\n    const outwardMaxOffset = radius - baseTextRadius - textMargin; // 向外到边缘的距离\n    const inwardMaxOffset = baseTextRadius - textMargin; // 向内到中心的距离\n    const maxRadialOffset = Math.min(outwardMaxOffset, inwardMaxOffset) * 0.8; // 取较小值确保不超出边界\n\n    // 根据文本方向计算在旋转后坐标系中的偏移\n    let finalOffsetX: number;\n    let finalOffsetY: number;\n\n    if (textConfig.direction === \"horizontal\") {\n      // 横向文本：offsetX控制弦向偏移，offsetY控制径向偏移\n      finalOffsetX = textConfig.offsetX * maxChordOffset; // 弦向偏移\n      finalOffsetY = textConfig.offsetY * maxRadialOffset; // 径向偏移\n    } else {\n      // 纵向文本：offsetX和offsetY作用交换\n      // offsetX控制径向偏移，offsetY控制弦向偏移\n      finalOffsetX = textConfig.offsetY * maxChordOffset; // 弦向偏移（由offsetY控制）\n      finalOffsetY = textConfig.offsetX * maxRadialOffset; // 径向偏移（由offsetX控制）\n    }\n\n    // 在旋转后的坐标系中应用偏移\n    this.ctx.translate(finalOffsetX, finalOffsetY);\n\n    // 计算文本区域尺寸（基于文本实际位置的可用空间）\n    const { maxTextWidth, maxTextHeight } = this.calculateTextArea(sectorAngle, baseTextRadius, textConfig.direction);\n\n    // 创建文本裁剪区域\n    this.createTextClipPath(maxTextWidth, maxTextHeight, textConfig.textAlign);\n\n    // 处理文本换行\n    const lines = this.wrapTextWithConfig(sector.text, maxTextWidth, textConfig);\n\n    // 绘制文本\n    this.renderTextLines(lines, textConfig, maxTextWidth, maxTextHeight);\n\n    this.ctx.restore();\n  }\n\n  /**\n   * 计算文本区域尺寸\n   */\n  private calculateTextArea(\n    sectorAngle: number,\n    radius: number,\n    direction: \"horizontal\" | \"vertical\"\n  ): {\n    maxTextWidth: number;\n    maxTextHeight: number;\n  } {\n    if (direction === \"horizontal\") {\n      // 横向：以弦长作为换行宽度，径向作为高度限制\n      const maxTextWidth = 2 * radius * Math.sin(sectorAngle / 2) * 0.95; // 弦向宽度用于换行\n      const maxTextHeight = radius * 0.7; // 径向高度限制\n      return { maxTextWidth, maxTextHeight };\n    } else {\n      // 纵向：以径向长度作为换行宽度，弦长作为高度限制\n      const maxTextWidth = radius * 0.8; // 径向长度用于换行（纵向文本的\"行宽\"）\n      const maxTextHeight = 2 * radius * Math.sin(sectorAngle / 2) * 0.9; // 弦向长度作为总高度限制\n      return { maxTextWidth, maxTextHeight };\n    }\n  }\n\n    /**\n   * 创建文本裁剪路径\n   */\n  private createTextClipPath(width: number, height: number, textAlign: \"left\" | \"center\" | \"right\"): void {\n    this.ctx.beginPath();\n\n    // 无论什么对齐方式，都使用完整的文本区域作为裁剪区域\n    // 这样确保左右对齐的文本不会被意外裁剪\n    this.ctx.rect(-width / 2, -height / 2, width, height);\n    this.ctx.clip();\n  }\n\n    /**\n   * 智能文本换行（支持中英文混合）\n   */\n  private wrapTextWithConfig(text: string, maxWidth: number, config: Required<SectorTextConfig>): string[] {\n    const lines: string[] = [];\n    let currentLine = \"\";\n\n    // 智能分词：按字符处理，但尊重英文单词边界\n    const chars = Array.from(text); // 正确处理unicode字符\n\n    for (let i = 0; i < chars.length; i++) {\n      const char = chars[i];\n      const testLine = currentLine + char;\n      const metrics = this.ctx.measureText(testLine);\n\n      if (metrics.width > maxWidth && currentLine !== \"\") {\n        // 当前行已满，开始新行\n        lines.push(currentLine.trim());\n        currentLine = char;\n\n                        // 检查是否达到最大行数\n        if (lines.length >= config.maxLines - 1) {\n          // 处理剩余文本和省略号\n          // currentLine 已经包含当前字符，所以 remainingText 从下一个字符开始\n          const remainingText = chars.slice(i + 1).join(\"\");\n          const remainingWithCurrent = currentLine + remainingText;\n\n          if (this.ctx.measureText(remainingWithCurrent).width > maxWidth) {\n            // 需要截断并添加省略号\n            // currentLine 已经包含了当前字符，所以从下一个字符开始添加\n            let truncated = currentLine;\n            for (let j = i + 1; j < chars.length; j++) {\n              const nextChar = chars[j];\n              const testWithNext = truncated + nextChar;\n              if (this.ctx.measureText(testWithNext + \"...\").width > maxWidth) {\n                break;\n              }\n              truncated += nextChar;\n            }\n            // 确保省略号能放下\n            while (this.ctx.measureText(truncated + \"...\").width > maxWidth && truncated.length > 0) {\n              truncated = truncated.slice(0, -1);\n            }\n            currentLine = truncated + \"...\";\n          } else {\n            currentLine = remainingWithCurrent;\n          }\n          lines.push(currentLine.trim());\n          break;\n        }\n      } else {\n        currentLine = testLine;\n      }\n    }\n\n    // 添加最后一行（如果有且未超过最大行数）\n    if (currentLine.trim() && lines.length < config.maxLines) {\n      lines.push(currentLine.trim());\n    }\n\n    return lines;\n  }\n\n    /**\n   * 渲染文本行\n   */\n  private renderTextLines(\n    lines: string[],\n    config: Required<SectorTextConfig>,\n    maxWidth: number,\n    maxHeight: number\n  ): void {\n    const totalHeight = lines.length * config.lineHeight;\n    const startY = -totalHeight / 2 + config.lineHeight / 2;\n\n    lines.forEach((line, index) => {\n      const y = startY + index * config.lineHeight;\n\n      // 根据对齐方式设置 x 坐标和 canvas textAlign\n      let x = 0;\n      if (config.textAlign === \"left\") {\n        this.ctx.textAlign = \"left\";\n        x = -maxWidth / 2; // 左边界\n      } else if (config.textAlign === \"right\") {\n        this.ctx.textAlign = \"right\";\n        x = maxWidth / 2; // 右边界\n      } else {\n        this.ctx.textAlign = \"center\";\n        x = 0; // 中心位置\n      }\n\n      this.ctx.fillText(line, x, y);\n    });\n  }\n\n  /**\n   * 统一绘制扇形分割线，使用全局描边配置\n   */\n  private drawSectorDividers(sectorAngle: number, radius: number): void {\n    const globalStroke = this.config.sectorStroke;\n\n    // 只有全局配置且宽度大于0时才绘制分割线\n    if (globalStroke && (globalStroke.width ?? 0) > 0) {\n      const sectorCount = this.config.sectors.length;\n\n      this.ctx.strokeStyle = globalStroke.color ?? \"#fff\";\n      this.ctx.lineWidth = globalStroke.width ?? 2;\n      this.ctx.setLineDash([]);\n      this.ctx.lineCap = \"round\";\n      this.ctx.lineJoin = \"round\";\n\n      // 绘制所有分割线\n      for (let index = 0; index < sectorCount; index++) {\n        const dividerAngle = (index + 1) * sectorAngle - sectorAngle / 2;\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, 0);\n        this.ctx.lineTo(Math.cos(dividerAngle) * radius, Math.sin(dividerAngle) * radius);\n        this.ctx.stroke();\n      }\n    }\n  }\n  private drawSectorImage(sector: SectorConfig, startAngle: number, endAngle: number, radius: number): void {\n    // 检查是否有图片\n    const image = this.images.sectors.get(sector.id);\n    const isLoaded = this.imageLoadStates.sectors.get(sector.id);\n\n    if (!image || !isLoaded || !sector.image) return;\n\n    this.ctx.save();\n\n    // 设置扇形裁剪区域，确保图片不会溢出扇形边界\n    this.ctx.beginPath();\n    this.ctx.arc(0, 0, radius, startAngle, endAngle);\n    this.ctx.lineTo(0, 0);\n    this.ctx.closePath();\n    this.ctx.clip();\n\n    // 获取图片配置，调整为合适的扇形内尺寸\n    let imageWidth: number;\n    let imageHeight: number;\n\n    if (sector.image.width !== undefined && sector.image.height !== undefined) {\n      // 使用指定尺寸\n      imageWidth = sector.image.width;\n      imageHeight = sector.image.height;\n    } else {\n      // 自动计算撑满整个扇形的尺寸\n      const sectorAngle = endAngle - startAngle;\n\n      // 扇形的最大宽度（弦长）\n      const chordLength = 2 * radius * Math.sin(sectorAngle / 2);\n\n      // 扇形的径向长度就是半径\n      const radialLength = radius;\n\n      // 设置图片尺寸为扇形的100%大小，撑满整个扇形\n      imageWidth = chordLength;\n      imageHeight = radialLength;\n    }\n\n    // 图片位置设置在扇形的径向中心\n    const imageDistance = radius * 0.5; // 从中心点到径向中心的距离\n\n    // 计算扇形中心角度\n    const centerAngle = startAngle + (endAngle - startAngle) / 2;\n\n    // 计算图片中心位置\n    const imageX = Math.cos(centerAngle) * imageDistance;\n    const imageY = Math.sin(centerAngle) * imageDistance;\n\n    // 平移到图片位置\n    this.ctx.translate(imageX, imageY);\n\n    // 旋转图片使其朝向正确方向\n    this.ctx.rotate(centerAngle + Math.PI / 2);\n\n    // 绘制图片（以图片中心为原点）\n    this.ctx.drawImage(image, -imageWidth / 2, -imageHeight / 2, imageWidth, imageHeight);\n\n    this.ctx.restore();\n  }\n\n  private drawSectorContentImage(sector: SectorConfig, startAngle: number, endAngle: number, radius: number): void {\n    // 检查是否有内容图片配置\n    if (!sector.contentImage) return;\n\n    const image = this.images.sectorContents.get(sector.id);\n    const isLoaded = this.imageLoadStates.sectorContents.get(sector.id);\n\n    if (!image || !isLoaded) return;\n\n    // 检查图片是否可见\n    if (sector.contentImage.visible === false) return;\n\n    this.ctx.save();\n\n    // 获取默认配置\n    const imageConfig = this.getDefaultContentImageConfig(sector.contentImage);\n\n    // 计算扇形中心角度\n    const centerAngle = startAngle + (endAngle - startAngle) / 2;\n    const sectorAngle = endAngle - startAngle;\n\n    // 计算图片基础位置\n    const baseImageRadius = radius * imageConfig.imageRadius;\n    const baseCenterX = Math.cos(centerAngle) * baseImageRadius;\n    const baseCenterY = Math.sin(centerAngle) * baseImageRadius;\n\n    // 计算偏移量（在全局坐标系中应用）\n    const maxOffset = radius * 0.3; // 最大偏移范围\n\n    // 计算弦向和径向的偏移向量\n    const chordDirection = { x: -Math.sin(centerAngle), y: Math.cos(centerAngle) }; // 弦向方向\n    const radialDirection = { x: Math.cos(centerAngle), y: Math.sin(centerAngle) }; // 径向方向\n\n    // 应用偏移：offsetX控制弦向，offsetY控制径向\n    const chordOffset = imageConfig.offsetX * maxOffset;\n    const radialOffset = imageConfig.offsetY * maxOffset;\n\n    const finalX = baseCenterX + chordDirection.x * chordOffset + radialDirection.x * radialOffset;\n    const finalY = baseCenterY + chordDirection.y * chordOffset + radialDirection.y * radialOffset;\n\n    // 移动到最终图片位置\n    this.ctx.translate(finalX, finalY);\n\n    // 应用旋转\n    this.ctx.rotate(centerAngle + (imageConfig.rotation * Math.PI) / 180);\n\n    // 设置透明度\n    this.ctx.globalAlpha = imageConfig.opacity;\n\n    // 绘制图片（以图片中心为原点）\n    this.ctx.drawImage(\n      image,\n      -imageConfig.width / 2,\n      -imageConfig.height / 2,\n      imageConfig.width,\n      imageConfig.height\n    );\n\n    this.ctx.restore();\n  }\n\n  /**\n   * 获取内容图片的默认配置\n   */\n  private getDefaultContentImageConfig(config: SectorContentImageConfig): Required<SectorContentImageConfig> {\n    return {\n      url: config.url,\n      width: config.width ?? 30,\n      height: config.height ?? 30,\n      offsetX: config.offsetX ?? 0,\n      offsetY: config.offsetY ?? 0,\n      imageRadius: config.imageRadius ?? 0.5,\n      rotation: config.rotation ?? 0,\n      opacity: config.opacity ?? 1,\n      visible: config.visible ?? true,\n    };\n  }\n\n  private drawArrow(centerX: number, centerY: number): void {\n    if (!this.imageLoadStates.arrow) return;\n\n    const arrowConfig = this.config.arrow || {};\n    const wheelRadius = this.config.size! / 2 - 20;\n\n    // 箭头距离中心的默认值\n    const arrowDistance = arrowConfig.distance ?? wheelRadius;\n\n    this.ctx.save();\n    this.ctx.translate(centerX, centerY);\n    this.ctx.rotate((this.targetDirection * Math.PI) / 180);\n\n    if (this.images.arrow && arrowConfig.image) {\n      // 使用图片绘制箭头 - 支持size参数缩放\n      const baseImageWidth = arrowConfig.imageWidth ?? 30;\n      const baseImageHeight = arrowConfig.imageHeight ?? 30;\n      const sizeScale = (arrowConfig.size ?? 15) / 15; // 以15为基准缩放\n\n      const scaledWidth = baseImageWidth * sizeScale;\n      const scaledHeight = baseImageHeight * sizeScale;\n\n      this.ctx.drawImage(\n        this.images.arrow,\n        -scaledWidth / 2, // 图片中心对齐\n        -arrowDistance - scaledHeight / 2, // 箭头在轮盘外部指向轮盘\n        scaledWidth,\n        scaledHeight\n      );\n    } else {\n      // 使用默认绘制方式绘制箭头\n      const arrowSize = arrowConfig.size ?? 15;\n      const arrowColor = arrowConfig.color ?? \"#333\";\n\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, -arrowDistance); // 箭头尖端指向轮盘边缘\n      this.ctx.lineTo(-arrowSize, -arrowDistance - arrowSize * 1.2); // 左侧\n      this.ctx.lineTo(arrowSize, -arrowDistance - arrowSize * 1.2); // 右侧\n      this.ctx.closePath();\n      this.ctx.fillStyle = arrowColor;\n      this.ctx.fill();\n\n      // 添加描边让箭头更明显\n      this.ctx.strokeStyle = \"#fff\";\n      this.ctx.lineWidth = 1;\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n  }\n\n  private drawCenterButton(centerX: number, centerY: number): void {\n    const centerButtonConfig = this.config.centerButton;\n    if (!centerButtonConfig || centerButtonConfig.visible === false) return;\n\n    if (!this.imageLoadStates.centerButtonBackground || !this.imageLoadStates.centerButtonArrow) return;\n\n    let buttonWidth = centerButtonConfig.width ?? 20;\n    let buttonHeight = centerButtonConfig.height ?? 20;\n    const backgroundColor = centerButtonConfig.backgroundColor ?? \"#fff\";\n\n    // 计算呼吸灯动画缩放系数\n    let animationScale = 1;\n    const animationConfig = this.getAnimationConfig();\n    if (animationConfig.enabled) {\n      // 使用正弦函数创建呼吸灯效果\n      animationScale = 1 + Math.sin(this.centerButtonAnimationTime) * animationConfig.scale;\n      buttonWidth *= animationScale;\n      buttonHeight *= animationScale;\n    }\n\n    this.ctx.save();\n    this.ctx.translate(centerX, centerY);\n\n    // 绘制按钮背景\n    this.ctx.beginPath();\n\n    // 如果宽高相等，绘制圆形，否则绘制椭圆\n    if (buttonWidth === buttonHeight) {\n      this.ctx.arc(0, 0, buttonWidth / 2, 0, Math.PI * 2);\n    } else {\n      this.ctx.ellipse(0, 0, buttonWidth / 2, buttonHeight / 2, 0, 0, Math.PI * 2);\n    }\n\n    // 设置填充颜色\n    this.ctx.fillStyle = backgroundColor;\n    this.ctx.fill();\n\n    // 绘制按钮边框（如果有的话）\n    if (centerButtonConfig.border) {\n      const borderWidth = centerButtonConfig.border.width ?? 2;\n      const borderColor = centerButtonConfig.border.color ?? \"#333\";\n      const borderStyle = centerButtonConfig.border.style ?? \"solid\";\n\n      this.ctx.strokeStyle = borderColor;\n      this.ctx.lineWidth = borderWidth;\n      this.ctx.lineCap = \"round\";\n      this.ctx.lineJoin = \"round\";\n\n      if (borderStyle === \"dashed\") {\n        this.ctx.setLineDash([borderWidth * 3, borderWidth * 2]);\n      } else if (borderStyle === \"dotted\") {\n        this.ctx.setLineDash([borderWidth, borderWidth]);\n      } else {\n        this.ctx.setLineDash([]);\n      }\n\n      this.ctx.stroke();\n    }\n\n    // 绘制按钮背景图片（如果有的话）\n    if (this.images.centerButtonBackground && centerButtonConfig.backgroundImage) {\n      this.ctx.save();\n      this.ctx.clip(); // 裁剪到按钮形状内\n\n      // 背景图片撑满整个按钮\n      this.ctx.drawImage(\n        this.images.centerButtonBackground,\n        -buttonWidth / 2,\n        -buttonHeight / 2,\n        buttonWidth,\n        buttonHeight\n      );\n\n      this.ctx.restore();\n    } // 绘制按钮内的箭头 - 在按钮坐标系内绘制，保证居中\n    if (centerButtonConfig.arrow) {\n      this.drawCenterButtonArrow(centerButtonConfig.arrow);\n    }\n\n    this.ctx.restore();\n  }\n\n  private drawCenterButtonArrow(arrowConfig?: CenterButtonArrowConfig): void {\n    if (!arrowConfig) return;\n\n    let arrowSize = arrowConfig.size ?? 10;\n    const arrowColor = arrowConfig.color ?? \"#333\";\n    const offsetY = arrowConfig.offsetY ?? 0; // 垂直偏移，0为中心\n\n    // 应用呼吸灯动画缩放效果到箭头\n    const animationConfig = this.getAnimationConfig();\n    if (animationConfig.enabled) {\n      // 使用正弦函数创建呼吸灯效果\n      const animationScale = 1 + Math.sin(this.centerButtonAnimationTime) * animationConfig.scale;\n      arrowSize *= animationScale;\n    }\n\n    // 在当前坐标系(按钮中心)绘制箭头，支持垂直偏移和角度旋转\n    this.ctx.save();\n\n    // 先根据targetDirection旋转方向，再在旋转后的坐标系中应用垂直偏移\n    this.ctx.rotate((this.targetDirection * Math.PI) / 180);\n    this.ctx.translate(0, offsetY);\n\n    if (this.images.centerButtonArrow && arrowConfig.image) {\n      // 使用图片绘制箭头 - 支持垂直偏移和size参数缩放\n      const baseImageWidth = arrowConfig.imageWidth ?? 20;\n      const baseImageHeight = arrowConfig.imageHeight ?? 20;\n      const sizeScale = arrowSize / 10; // 以10为基准缩放，现在使用动画后的arrowSize\n\n      const scaledWidth = baseImageWidth * sizeScale;\n      const scaledHeight = baseImageHeight * sizeScale;\n\n      this.ctx.drawImage(\n        this.images.centerButtonArrow,\n        -scaledWidth / 2, // 水平居中\n        -scaledHeight / 2, // 垂直居中（相对于偏移后的位置）\n        scaledWidth,\n        scaledHeight\n      );\n    } else {\n      // 绘制默认箭头 - 支持垂直偏移\n      this.ctx.beginPath();\n\n      // 箭头形状相对于偏移后的位置居中，现在使用动画后的arrowSize\n      const halfSize = arrowSize / 2;\n      this.ctx.moveTo(0, -halfSize); // 上顶点\n      this.ctx.lineTo(-halfSize * 0.6, halfSize); // 左下角\n      this.ctx.lineTo(halfSize * 0.6, halfSize); // 右下角\n      this.ctx.closePath();\n\n      this.ctx.fillStyle = arrowColor;\n      this.ctx.fill();\n\n      // 添加描边让箭头更明显\n      this.ctx.strokeStyle = \"#fff\";\n      this.ctx.lineWidth = 1;\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n  }\n  private drawWheelBorder(centerX: number, centerY: number, radius: number): void {\n    const borderConfig = this.config.border;\n    if (!borderConfig) return;\n\n    const borderWidth = borderConfig.width ?? 2;\n    const borderColor = borderConfig.color ?? \"#333\";\n    const borderStyle = borderConfig.style ?? \"solid\";\n\n    this.ctx.save();\n    this.ctx.translate(centerX, centerY);\n\n    this.ctx.beginPath();\n    this.ctx.arc(0, 0, radius, 0, Math.PI * 2);\n    this.ctx.strokeStyle = borderColor;\n    this.ctx.lineWidth = borderWidth;\n\n    // 设置线条样式以获得更清晰的渲染\n    this.ctx.lineCap = \"round\";\n    this.ctx.lineJoin = \"round\";\n\n    // 设置边框样式\n    if (borderStyle === \"dashed\") {\n      this.ctx.setLineDash([borderWidth * 3, borderWidth * 2]);\n    } else if (borderStyle === \"dotted\") {\n      this.ctx.setLineDash([borderWidth, borderWidth]);\n    } else {\n      this.ctx.setLineDash([]);\n    }\n\n    this.ctx.stroke();\n    this.ctx.restore();\n  }\n\n  private getRandomSectorId(): string {\n    return this.config.sectors[Math.floor(Math.random() * this.config.sectors.length)].id;\n  }\n\n  // 图片配置\n  setBackgroundImage = (image: string | HTMLImageElement | undefined) => {\n    this.config.backgroundImage = image;\n    this.imageLoadStates.background = false;\n    this.reloadImageByName('background');\n  };\n\n  setSectorImage(sectorId: string, imageUrl: string | undefined, options?: { width?: number; height?: number }): void {\n    const sector = this.config.sectors.find((s) => s.id === sectorId);\n    if (!sector) {\n      console.warn(`找不到ID为 ${sectorId} 的扇形`);\n      return;\n    }\n\n    sector.image = imageUrl\n      ? {\n          url: imageUrl,\n          width: options?.width,\n          height: options?.height,\n        }\n      : undefined;\n\n    if (imageUrl) {\n      this.imageLoadStates.sectors.set(sectorId, false);\n      this.loadSectorImages();\n    } else {\n      this.imageLoadStates.sectors.set(sectorId, true);\n      this.images.sectors.delete(sectorId);\n      this.draw();\n    }\n  }\n\n  // 清理方法\n  destroy(): void {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n    }\n\n    // 停止持续动画\n    this.stopContinuousAnimation();\n\n    // 重置鼠标样式\n    this.canvas.style.cursor = \"default\";\n  }\n}\n"],"names":["LuckyWheelEngine","constructor","canvas","config","this","rotateDeg","speed","DEFAULTS","SPEED","accelerationTime","ACCELERATION_TIME","decelerationTime","DECELERATION_TIME","stopOffsetRange","STOP_OFFSET_RANGE","targetDirection","TARGET_DIRECTION","startTime","endTime","stopDeg","endDeg","prizeDeg","FPS","images","arrow","undefined","background","centerButtonBackground","centerButtonArrow","sectors","Map","sectorContents","imageLoadStates","step","centerButtonAnimationTime","imageLoaders","name","getSrc","backgroundImage","onLoad","img","onError","src","console","warn","setLoaded","loaded","image","centerButton","loadArrowImage","reloadImageByName","loadCenterButtonBackgroundImage","loadCenterButtonArrowImage","setStopOffsetRange","range","Math","max","min","setTargetDirection","direction","draw","setArrowConfig","createConfigSetter","setArrowDistance","distance","setBorderConfig","setBorderWidth","width","setBorderColor","color","setBorderStyle","style","setInnerPadding","padding","innerPadding","setSectorStrokeConfig","setSectorStrokeWidth","setSectorStrokeColor","setCenterButtonConfig","setCenterButtonAnimation","enabled","animation","setCenterButtonAnimationConfig","animationConfig","setCenterButtonAnimationSpeed","currentConfig","getAnimationConfig","scale","setCenterButtonAnimationScale","setSectorTextConfig","createSectorConfigSetter","setBatchSectorTextConfig","configs","forEach","sectorId","getSectorTextConfigById","findSector","textConfig","resetSectorTextConfig","sector","setSectorTextFontSize","fontSize","setSectorTextColor","setSectorTextLineHeight","lineHeight","setSectorTextMaxLines","maxLines","setSectorTextDirection","setSectorTextOffset","offsetX","offsetY","setSectorTextAlign","textAlign","setSectorTextFont","fontFamily","fontWeight","setSectorTextRadius","textRadius","setSectorContentImageConfig","imageConfig","contentImage","url","Object","assign","set","loadSectorContentImages","setSectorContentImage","imageUrl","options","removeSectorContentImage","delete","setSectorContentImageSize","height","setSectorContentImageOffset","setSectorContentImageRadius","imageRadius","setSectorContentImageRotation","rotation","setSectorContentImageOpacity","opacity","setSectorContentImageVisible","visible","setBackgroundImage","ctx","getContext","devicePixelRatio","window","size","getDefaultSize","setupHighDPICanvas","length","setupCenterButtonMouseEvents","loadAllImages","startContinuousAnimation","parent","parentElement","parentRect","getBoundingClientRect","canvasPadding","availableWidth","availableHeight","minSize","actualCanvasSize","floor","imageSmoothingEnabled","imageSmoothingQuality","addEventListener","event","isPointInCenterButton","cursor","onCenterButtonClickCallback","start","centerButtonConfig","rect","x","clientX","left","y","clientY","top","dx","dy","loader","loadSingleImage","loadSectorImages","loadImage","srcString","HTMLImageElement","Image","onload","onerror","loadMapImages","getItems","getImageSrc","getItemId","imageMap","loadedMap","errorPrefix","item","id","find","l","ANIMATION_SPEED","animateFrame","continuousAnimationId","requestAnimationFrame","stopContinuousAnimation","cancelAnimationFrame","Date","now","prizeFlag","run","stop","targetId","onStop","onStopCallback","getRandomSectorId","targetIndex","findIndex","s","setCenterButtonClickCallback","callback","updateConfig","configPath","updates","keys","split","current","i","lastKey","validator","onUpdate","key","value","configKey","validatedUpdates","fromEntries","entries","map","frameCount","result","carveOnGunwaleOfAMovingBoat","startInterval","endInterval","currSpeed","quadEaseIn","quadEaseOut","animationId","stopRange","random","prevSpeed","prevDeg","t","b","c","d","centerX","centerY","fullRadius","border","sectorRadius","clearRect","save","translate","drawBackgroundImage","adjustedRotation","rotate","PI","sectorAngle","index","startAngle","endAngle","drawSector","drawSectorDividers","restore","drawWheelBorder","drawArrow","drawCenterButton","radius","beginPath","arc","clip","diameter","drawImage","lineTo","fillStyle","fill","drawSectorImage","drawSectorContentImage","drawSectorText","getDefaultTextConfig","getSectorTextConfig","text","centerAngle","font","textBaseline","baseTextRadius","baseCenterX","cos","baseCenterY","sin","textChordLength","textMargin","maxChordOffset","outwardMaxOffset","inwardMaxOffset","maxRadialOffset","finalOffsetX","finalOffsetY","maxTextWidth","maxTextHeight","calculateTextArea","createTextClipPath","lines","wrapTextWithConfig","renderTextLines","maxWidth","currentLine","chars","Array","from","char","testLine","measureText","push","trim","remainingWithCurrent","slice","join","truncated","j","nextChar","testWithNext","maxHeight","startY","line","fillText","globalStroke","sectorStroke","sectorCount","strokeStyle","lineWidth","setLineDash","lineCap","lineJoin","dividerAngle","moveTo","stroke","get","isLoaded","imageWidth","imageHeight","closePath","imageDistance","imageX","imageY","getDefaultContentImageConfig","baseImageRadius","maxOffset","chordDirection","radialDirection","chordOffset","radialOffset","finalX","finalY","globalAlpha","arrowConfig","wheelRadius","arrowDistance","baseImageWidth","baseImageHeight","sizeScale","scaledWidth","scaledHeight","arrowSize","arrowColor","buttonWidth","buttonHeight","backgroundColor","animationScale","ellipse","borderWidth","borderColor","borderStyle","drawCenterButtonArrow","halfSize","borderConfig","setSectorImage","destroy","MIN_SIZE","MAX_OFFSET_RATIO","ARROW_DISTANCE_OFFSET","WHEEL_BORDER_OFFSET","CENTER_BUTTON","DEFAULT_WIDTH","DEFAULT_HEIGHT","DEFAULT_COLOR","DEFAULT_ARROW_SIZE","DEFAULT_ARROW_COLOR","ARROW","DEFAULT_SIZE","DEFAULT_IMAGE_WIDTH","DEFAULT_IMAGE_HEIGHT","SECTOR","DEFAULT_STROKE_WIDTH","DEFAULT_STROKE_COLOR","CONTENT_IMAGE","DEFAULT_RADIUS","DEFAULT_OPACITY"],"mappings":"mBAcaA,EAmFX,WAAAC,CAAYC,EAA2BC,GAzC/BC,KAASC,UAAG,EACZD,KAAAE,MAAgBN,EAAiBO,SAASC,MAC1CJ,KAAAK,iBAA2BT,EAAiBO,SAASG,kBACrDN,KAAAO,iBAA2BX,EAAiBO,SAASK,kBACrDR,KAAAS,gBAA0Bb,EAAiBO,SAASO,kBACpDV,KAAAW,gBAA0Bf,EAAiBO,SAASS,iBACpDZ,KAASa,UAAG,EACZb,KAAOc,QAAG,EACVd,KAAOe,QAAG,EACVf,KAAMgB,OAAG,EACThB,KAAQiB,SAAG,EACXjB,KAAAkB,IAActB,EAAiBO,SAASe,IAMxClB,KAAAmB,OAAS,CACfC,WAAOC,EACPC,gBAAYD,EACZE,4BAAwBF,EACxBG,uBAAmBH,EACnBI,QAAS,IAAIC,IACbC,eAAgB,IAAID,KAGd1B,KAAA4B,gBAAkB,CACxBR,OAAO,EACPE,YAAY,EACZC,wBAAwB,EACxBC,mBAAmB,EACnBC,QAAS,IAAIC,IACbC,eAAgB,IAAID,KAGd1B,KAAI6B,KAAkB,EAItB7B,KAAyB8B,0BAAG,EAmI5B9B,KAAA+B,aAAe,CACrB,CACEC,KAAM,aACNC,OAAQ,IAAMjC,KAAKD,OAAOmC,gBAC1BC,OAASC,IAA4BpC,KAAKmB,OAAOG,WAAac,GAC9DC,QAAUC,GAAgBC,QAAQC,KAAK,YAAaF,GACpDG,UAAYC,IAAsB1C,KAAK4B,gBAAgBN,WAAaoB,IAEtE,CACEV,KAAM,QACNC,OAAQ,IAAMjC,KAAKD,OAAOqB,OAAOuB,MACjCR,OAASC,IAA4BpC,KAAKmB,OAAOC,MAAQgB,GACzDC,QAAUC,GAAgBC,QAAQC,KAAK,YAAaF,GACpDG,UAAYC,IAAsB1C,KAAK4B,gBAAgBR,MAAQsB,IAEjE,CACEV,KAAM,yBACNC,OAAQ,IAAMjC,KAAKD,OAAO6C,cAAcV,gBACxCC,OAASC,IAA4BpC,KAAKmB,OAAOI,uBAAyBa,GAC1EC,QAAUC,GAAgBC,QAAQC,KAAK,gBAAiBF,GACxDG,UAAYC,IAAsB1C,KAAK4B,gBAAgBL,uBAAyBmB,IAElF,CACEV,KAAM,oBACNC,OAAQ,IAAMjC,KAAKD,OAAO6C,cAAcxB,OAAOuB,MAC/CR,OAASC,IAA4BpC,KAAKmB,OAAOK,kBAAoBY,GACrEC,QAAUC,GAAgBC,QAAQC,KAAK,gBAAiBF,GACxDG,UAAYC,IAAsB1C,KAAK4B,gBAAgBJ,kBAAoBkB,KAkHvE1C,KAAc6C,eAAG,IAAM7C,KAAK8C,kBAAkB,SAC9C9C,KAA+B+C,gCAAG,IAAM/C,KAAK8C,kBAAkB,0BAC/D9C,KAA0BgD,2BAAG,IAAMhD,KAAK8C,kBAAkB,qBAsIlE9C,KAAAiD,mBAAsBC,IACpBlD,KAAKS,gBAAkB0C,KAAKC,IAAI,EAAGD,KAAKE,IAAI,EAAGH,KAGjDlD,KAAAsD,mBAAsBC,IACpBvD,KAAKW,iBAAoB4C,EAAY,IAAO,KAAO,IACnDvD,KAAKwD,QAIPxD,KAAcyD,eAAGzD,KAAK0D,mBAAgC,aAASrC,EAAW,UAEvCA,IAA7BrB,KAAKD,OAAOqB,OAAOuB,QACrB3C,KAAK4B,gBAAgBR,OAAQ,EAC7BpB,KAAK6C,oBAIT7C,KAAgB2D,iBAAIC,GAAqB5D,KAAKyD,eAAe,CAAEG,SAAUT,KAAKC,IAAI,EAAGQ,KAGrF5D,KAAA6D,gBAAkB7D,KAAK0D,mBAAiC,UACxD1D,KAAc8D,eAAIC,GAAkB/D,KAAK6D,gBAAgB,CAAEE,MAAOZ,KAAKC,IAAI,EAAGW,KAC9E/D,KAAAgE,eAAkBC,GAAkBjE,KAAK6D,gBAAgB,CAAEI,UAC3DjE,KAAAkE,eAAkBC,GAAyCnE,KAAK6D,gBAAgB,CAAEM,UAGlFnE,KAAAoE,gBAAmBC,IACjBrE,KAAKD,OAAOuE,aAAenB,KAAKC,IAAI,EAAGiB,GACvCrE,KAAKwD,QAIPxD,KAAAuE,sBAAwBvE,KAAK0D,mBAAuD,gBACpF1D,KAAoBwE,qBAAIT,GAAkB/D,KAAKuE,sBAAsB,CAAER,MAAOZ,KAAKC,IAAI,EAAGW,KAC1F/D,KAAAyE,qBAAwBR,GAAkBjE,KAAKuE,sBAAsB,CAAEN,UAGvEjE,KAAqB0E,sBAAG1E,KAAK0D,mBAAuC,oBAAgBrC,EAAW,UAE3CA,IAA9CrB,KAAKD,OAAO6C,cAAcV,kBAC5BlC,KAAK4B,gBAAgBL,wBAAyB,EAC9CvB,KAAK+C,wCAEwC1B,IAA3CrB,KAAKD,OAAO6C,cAAcxB,OAAOuB,QACnC3C,KAAK4B,gBAAgBJ,mBAAoB,EACzCxB,KAAKgD,gCAIThD,KAAA2E,yBAA4BC,GAAqB5E,KAAK0E,sBAAsB,CAAEG,UAAWD,IACzF5E,KAAA8E,+BAAkCC,GAChC/E,KAAK0E,sBAAsB,CAAEG,UAAWE,IAE1C/E,KAAAgF,8BAAiC9E,IAC/B,MAAM+E,EAAgBjF,KAAKkF,qBAC3BlF,KAAK8E,+BAA+B,CAClCF,QAASK,EAAcL,QACvB1E,MAAOiD,KAAKC,IAAI,EAAGlD,GACnBiF,MAAOF,EAAcE,SAIzBnF,KAAAoF,8BAAiCD,IAC/B,MAAMF,EAAgBjF,KAAKkF,qBAC3BlF,KAAK8E,+BAA+B,CAClCF,QAASK,EAAcL,QACvB1E,MAAO+E,EAAc/E,MACrBiF,MAAOhC,KAAKC,IAAI,EAAGD,KAAKE,IAAI,EAAG8B,OAqCnCnF,KAAAqF,oBAAsBrF,KAAKsF,yBAA2C,cAEtEtF,KAAAuF,yBAA4BC,IAC1BA,EAAQC,QAAQ,EAAGC,WAAU3F,YAAaC,KAAKqF,oBAAoBK,EAAU3F,KAG/EC,KAAA2F,wBAA2BD,GAAqB1F,KAAK4F,WAAWF,IAAWG,WAE3E7F,KAAA8F,sBAAyBJ,IACvB,MAAMK,EAAS/F,KAAK4F,WAAWF,GAC3BK,IACFA,EAAOF,gBAAaxE,EACpBrB,KAAKwD,SAKTxD,KAAqBgG,sBAAG,CAACN,EAAkBO,IACzCjG,KAAKqF,oBAAoBK,EAAU,CAAEO,SAAU9C,KAAKC,IAAI,EAAG6C,KAE7DjG,KAAAkG,mBAAqB,CAACR,EAAkBzB,IACtCjE,KAAKqF,oBAAoBK,EAAU,CAAEzB,UAEvCjE,KAAuBmG,wBAAG,CAACT,EAAkBU,IAC3CpG,KAAKqF,oBAAoBK,EAAU,CAAEU,WAAYjD,KAAKC,IAAI,EAAGgD,KAE/DpG,KAAqBqG,sBAAG,CAACX,EAAkBY,IACzCtG,KAAKqF,oBAAoBK,EAAU,CAAEY,SAAUnD,KAAKC,IAAI,EAAGkD,KAE7DtG,KAAAuG,uBAAyB,CAACb,EAAkBnC,IAC1CvD,KAAKqF,oBAAoBK,EAAU,CAAEnC,cAEvCvD,KAAAwG,oBAAsB,CAACd,EAAkBe,EAAiBC,IACxD1G,KAAKqF,oBAAoBK,EAAU,CACjCe,QAAStD,KAAKC,KAAK,EAAGD,KAAKE,IAAI,EAAGoD,IAClCC,QAASvD,KAAKC,KAAK,EAAGD,KAAKE,IAAI,EAAGqD,MAGtC1G,KAAA2G,mBAAqB,CAACjB,EAAkBkB,IACtC5G,KAAKqF,oBAAoBK,EAAU,CAAEkB,cAEvC5G,KAAiB6G,kBAAG,CAACnB,EAAkBoB,EAAoBC,KACzD,MAAMhH,EAA2B,CAAE+G,cAC/BC,IAAYhH,EAAOgH,WAAaA,GACpC/G,KAAKqF,oBAAoBK,EAAU3F,IAGrCC,KAAAgH,oBAAsB,CAACtB,EAAkBuB,IACvCjH,KAAKqF,oBAAoBK,EAAU,CAAEuB,WAAY9D,KAAKC,IAAI,GAAKD,KAAKE,IAAI,EAAG4D,MAG7EjH,KAAAkH,4BAA8B,CAACxB,EAAkByB,KAC/C,MAAMpB,EAAS/F,KAAK4F,WAAWF,GAC/B,GAAKK,EAAL,CAEA,IAAKA,EAAOqB,cAAgBD,EAAYE,IACtCtB,EAAOqB,aAAe,CAAEC,IAAKF,EAAYE,OAAQF,OAC5C,KAAIpB,EAAOqB,aAIhB,YADA7E,QAAQC,KAAK,MAAMkD,gBAFnB4B,OAAOC,OAAOxB,EAAOqB,aAAcD,EAIpC,CAEGA,EAAYE,MACdrH,KAAK4B,gBAAgBD,eAAe6F,IAAI9B,GAAU,GAClD1F,KAAKyH,2BAGPzH,KAAKwD,MAhBe,GAmBtBxD,KAAqB0H,sBAAG,CAAChC,EAAkBiC,EAAqCC,IAQ1E5H,KAAKkH,4BAA4BxB,EAAU,CAAE2B,IAAKM,KAAaC,IAErE5H,KAAA6H,yBAA4BnC,IAC1B,MAAMK,EAAS/F,KAAK4F,WAAWF,GAC1BK,IAELA,EAAOqB,kBAAe/F,EACtBrB,KAAKmB,OAAOQ,eAAemG,OAAOpC,GAClC1F,KAAK4B,gBAAgBD,eAAe6F,IAAI9B,GAAU,GAClD1F,KAAKwD,SAIPxD,KAAA+H,0BAA4B,CAACrC,EAAkB3B,EAAeiE,IAC5DhI,KAAKkH,4BAA4BxB,EAAU,CACzC3B,MAAOZ,KAAKC,IAAI,EAAGW,GACnBiE,OAAQ7E,KAAKC,IAAI,EAAG4E,KAGxBhI,KAAAiI,4BAA8B,CAACvC,EAAkBe,EAAiBC,IAChE1G,KAAKkH,4BAA4BxB,EAAU,CACzCe,QAAStD,KAAKC,KAAK,EAAGD,KAAKE,IAAI,EAAGoD,IAClCC,QAASvD,KAAKC,KAAK,EAAGD,KAAKE,IAAI,EAAGqD,MAGtC1G,KAAAkI,4BAA8B,CAACxC,EAAkByC,IAC/CnI,KAAKkH,4BAA4BxB,EAAU,CACzCyC,YAAahF,KAAKC,IAAI,GAAKD,KAAKE,IAAI,EAAG8E,MAG3CnI,KAAAoI,8BAAgC,CAAC1C,EAAkB2C,IACjDrI,KAAKkH,4BAA4BxB,EAAU,CAAE2C,aAE/CrI,KAAAsI,6BAA+B,CAAC5C,EAAkB6C,IAChDvI,KAAKkH,4BAA4BxB,EAAU,CACzC6C,QAASpF,KAAKC,IAAI,EAAGD,KAAKE,IAAI,EAAGkF,MAGrCvI,KAAAwI,6BAA+B,CAAC9C,EAAkB+C,IAChDzI,KAAKkH,4BAA4BxB,EAAU,CAAE+C,YAozB/CzI,KAAA0I,mBAAsB/F,IACpB3C,KAAKD,OAAOmC,gBAAkBS,EAC9B3C,KAAK4B,gBAAgBN,YAAa,EAClCtB,KAAK8C,kBAAkB,eA56CvB9C,KAAKF,OAASA,EACdE,KAAK2I,IAAM7I,EAAO8I,WAAW,MAC7B5I,KAAKD,OAASA,EACdC,KAAK6I,iBAAmBC,OAAOD,kBAAoB,EAG9C7I,KAAKD,OAAOgJ,OACf/I,KAAKD,OAAOgJ,KAAO/I,KAAKgJ,kBAI1BhJ,KAAKiJ,mBAAmBjJ,KAAKD,OAAOgJ,MAEpC/I,KAAKS,gBAAkBV,EAAOU,iBAAmBb,EAAiBO,SAASO,kBAC3EV,KAAKW,gBAAkBZ,EAAOY,iBAAmBf,EAAiBO,SAASS,iBAC3EZ,KAAKiB,SAAW,IAAMlB,EAAO0B,QAAQyH,OAGrClJ,KAAKmJ,+BAELnJ,KAAKoJ,gBACLpJ,KAAKwD,OAGLxD,KAAKqJ,0BACN,CAKO,cAAAL,GACN,MAAMM,EAAStJ,KAAKF,OAAOyJ,cAC3B,IAAKD,EAEH,OAAO,IAGT,MAAME,EAAaF,EAAOG,wBACpBC,EAAgB1J,KAAKD,OAAO2J,eAAiB,EAG7CC,EAAiBH,EAAWzF,MAAwB,EAAhB2F,EACpCE,EAAkBJ,EAAWxB,OAAyB,EAAhB0B,EAGtCG,EAAU1G,KAAKE,IAAIsG,EAAgBC,GAGzC,OAAOzG,KAAKC,IAAIyG,EAAS,IAC1B,CAKO,kBAAAZ,CAAmBF,GACzB,MACMe,EAAmBf,EAAuB,GAD1B/I,KAAKD,OAAO2J,eAAiB,GAInD1J,KAAKF,OAAOqE,MAAMJ,MAAQ+F,EAAmB,KAC7C9J,KAAKF,OAAOqE,MAAM6D,OAAS8B,EAAmB,KAG9C9J,KAAKF,OAAOiE,MAAQZ,KAAK4G,MAAMD,EAAmB9J,KAAK6I,kBACvD7I,KAAKF,OAAOkI,OAAS7E,KAAK4G,MAAMD,EAAmB9J,KAAK6I,kBAGxD7I,KAAK2I,IAAIxD,MAAMnF,KAAK6I,iBAAkB7I,KAAK6I,kBAG3C7I,KAAK2I,IAAIqB,uBAAwB,EACjChK,KAAK2I,IAAIsB,sBAAwB,MAClC,CAKO,4BAAAd,GACNnJ,KAAKF,OAAOoK,iBAAiB,YAAcC,IACrCnK,KAAKoK,sBAAsBD,GAC7BnK,KAAKF,OAAOqE,MAAMkG,OAAS,UAE3BrK,KAAKF,OAAOqE,MAAMkG,OAAS,YAI/BrK,KAAKF,OAAOoK,iBAAiB,aAAc,KACzClK,KAAKF,OAAOqE,MAAMkG,OAAS,YAI7BrK,KAAKF,OAAOoK,iBAAiB,QAAUC,IACjCnK,KAAKoK,sBAAsBD,KAE7BnK,KAAKsK,gCAGa,IAAdtK,KAAK6B,MACP7B,KAAKuK,UAIZ,CAKO,qBAAAH,CAAsBD,GAC5B,MAAMK,EAAqBxK,KAAKD,OAAO6C,aACvC,IAAK4H,IAAqD,IAA/BA,EAAmB/B,QAAmB,OAAO,EAExE,MAAMgC,EAAOzK,KAAKF,OAAO2J,wBACnBC,EAAgB1J,KAAKD,OAAO2J,eAAiB,EAC7CI,EAAmB9J,KAAKD,OAAOgJ,KAAwB,EAAhBW,EACvCgB,EAAIP,EAAMQ,QAAUF,EAAKG,KAAOd,EAAmB,EACnDe,EAAIV,EAAMW,QAAUL,EAAKM,IAAMjB,EAAmB,EAMlDkB,EAAKN,IAJSF,EAAmBzG,OAAS,IAIlB,GACxBkH,EAAKJ,IAJUL,EAAmBxC,QAAU,IAInB,GAE/B,OAAOgD,EAAKA,EAAKC,EAAKA,GAAM,CAC7B,CAkCO,aAAA7B,GAENpJ,KAAK+B,aAAa0D,QAAQyF,GAAUlL,KAAKmL,gBAAgBD,IAGzDlL,KAAKoL,mBACLpL,KAAKyH,yBACN,CAEO,eAAA0D,CAAgBD,GACtB,MAAM5I,EAAM4I,EAAOjJ,SACnBiJ,EAAOzI,WAAWH,GAElBtC,KAAKqL,UACH/I,EACCF,IACC8I,EAAO/I,OAAOC,GACd8I,EAAOzI,WAAU,GACjBzC,KAAKwD,QAEN8H,IACCJ,EAAO7I,QAAQiJ,GACfJ,EAAOzI,WAAU,GACjBzC,KAAKwD,QAGV,CAEO,SAAA6H,CACN/I,EACAH,EACAE,GAEA,IAAKC,EAAK,OAEV,GAAIA,aAAeiJ,iBAEjB,YADApJ,EAAOG,GAIT,MAAMF,EAAM,IAAIoJ,MAChBpJ,EAAIqJ,OAAS,IAAMtJ,EAAOC,GAC1BA,EAAIsJ,QAAU,KACZrJ,IAAyB,iBAARC,EAAmBA,EAAM,yBAE5CF,EAAIE,IAAMA,CACX,CAEO,aAAAqJ,CACNC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEAL,IAAWnG,QAASyG,IAClB,MAAM5J,EAAMuJ,EAAYK,GAClBC,EAAKL,EAAUI,GAEhB5J,GAKL0J,EAAUxE,IAAI2E,GAAI,GAClBnM,KAAKqL,UACH/I,EACCF,IACC2J,EAASvE,IAAI2E,EAAI/J,GACjB4J,EAAUxE,IAAI2E,GAAI,GAClBnM,KAAKwD,QAEN8H,IACC/I,QAAQC,KAAK,GAAGyJ,KAAeE,MAAQb,GACvCU,EAAUxE,IAAI2E,GAAI,GAClBnM,KAAKwD,UAfPwI,EAAUxE,IAAI2E,GAAI,IAmBvB,CAEO,gBAAAf,GACNpL,KAAK2L,cACH,IAAM3L,KAAKD,OAAO0B,QACjBsE,GAAWA,EAAOpD,OAAO0E,IACzBtB,GAAWA,EAAOoG,GACnBnM,KAAKmB,OAAOM,QACZzB,KAAK4B,gBAAgBH,QACrB,WAEH,CAEO,uBAAAgG,GACNzH,KAAK2L,cACH,IAAM3L,KAAKD,OAAO0B,QACjBsE,GAAWA,EAAOqB,cAAcC,IAChCtB,GAAWA,EAAOoG,GACnBnM,KAAKmB,OAAOQ,eACZ3B,KAAK4B,gBAAgBD,eACrB,aAEH,CAGO,iBAAAmB,CAAkBd,GACxB,MAAMkJ,EAASlL,KAAK+B,aAAaqK,KAAKC,GAAKA,EAAErK,OAASA,GAClDkJ,GAAQlL,KAAKmL,gBAAgBD,EAClC,CASO,kBAAAhG,GACN,MAAMsF,EAAqBxK,KAAKD,OAAO6C,aACvC,IAAK4H,EACH,MAAO,CAAE5F,SAAS,EAAO1E,MAAON,EAAiBO,SAASmM,gBAAiBnH,MAAO,IAGpF,MAAMN,EAAY2F,EAAmB3F,UAErC,OAAkB,IAAdA,EACK,CAAED,SAAS,EAAO1E,MAAON,EAAiBO,SAASmM,gBAAiBnH,MAAO,KAGlE,IAAdN,QAAoCxD,IAAdwD,EACjB,CAAED,SAAS,EAAM1E,MAAON,EAAiBO,SAASmM,gBAAiBnH,MAAO,IAI5E,CACLP,SAA+B,IAAtBC,EAAUD,QACnB1E,MAAO2E,EAAU3E,OAASN,EAAiBO,SAASmM,gBACpDnH,MAAON,EAAUM,OAAS,GAE7B,CAKO,wBAAAkE,GACN,MAAMkD,EAAe,KAEnB,MAAMxH,EAAkB/E,KAAKkF,qBAG7BlF,KAAK8B,2BAAqD,KAAxBiD,EAAgB7E,MAGlD,MAAMsK,EAAqBxK,KAAKD,OAAO6C,cACH,IAAhC4H,GAAoB/B,SAAqB1D,EAAgBH,SAC3D5E,KAAKwD,OAGPxD,KAAKwM,sBAAwBC,sBAAsBF,IAGrDA,GACD,CAKO,uBAAAG,GACF1M,KAAKwM,wBACPG,qBAAqB3M,KAAKwM,uBAC1BxM,KAAKwM,2BAAwBnL,EAEhC,CAID,KAAAkJ,GACoB,IAAdvK,KAAK6B,OACT7B,KAAKa,UAAY+L,KAAKC,MACtB7M,KAAK8M,eAAYzL,EACjBrB,KAAK6B,KAAO,EACZ7B,KAAK+M,MACN,CAED,IAAAC,CAAKC,EAAmBC,GACtB,GAAkB,IAAdlN,KAAK6B,MAA4B,IAAd7B,KAAK6B,KAAY,OAExC7B,KAAKmN,eAAiBD,EACtBD,EAAWA,GAAYjN,KAAKoN,oBAE5B,MAAMC,EAAcrN,KAAKD,OAAO0B,QAAQ6L,UAAWC,GAAMA,EAAEpB,KAAOc,GAClE,IAAqB,IAAjBI,EAGF,OAFArN,KAAK6B,KAAO,OACZ7B,KAAK8M,WAAa,GAIpB9M,KAAK6B,KAAO,EACZ7B,KAAK8M,UAAYO,CAClB,CAKD,4BAAAG,CAA6BC,GAC3BzN,KAAKsK,4BAA8BmD,CACpC,CAIO,YAAAC,CAAgBC,EAAoBC,EAAqBH,GAC/D,MAAMI,EAAOF,EAAWG,MAAM,KAC9B,IAAIC,EAAe/N,KAAKD,OAExB,IAAK,IAAIiO,EAAI,EAAGA,EAAIH,EAAK3E,OAAS,EAAG8E,IAC9BD,EAAQF,EAAKG,MAAKD,EAAQF,EAAKG,IAAM,CAAA,GAC1CD,EAAUA,EAAQF,EAAKG,IAGzB,MAAMC,EAAUJ,EAAKA,EAAK3E,OAAS,GACnC6E,EAAQE,GAAW,IAAKF,EAAQE,MAAaL,GAE7CH,MACAzN,KAAKwD,MACN,CAGO,kBAAAE,CACNiK,EACAO,EACAC,GAEA,OAAQP,IACFM,GAAgC,iBAAZN,GACtBtG,OAAOuG,KAAKD,GAASnI,QAAQ2I,IAC3B,MAAMC,EAAST,EAAgBQ,QACjB/M,IAAVgN,IACDT,EAAgBQ,GAAOF,EAAUG,MAIxCrO,KAAK0N,aAAaC,EAAYC,EAASO,GAE1C,CA4EO,UAAAvI,CAAWF,GACjB,MAAMK,EAAS/F,KAAKD,OAAO0B,QAAQ2K,KAAMmB,GAAMA,EAAEpB,KAAOzG,GAIxD,OAHKK,GACHxD,QAAQC,KAAK,UAAUkD,SAElBK,CACR,CAES,wBAAAT,CACRgJ,EACAJ,GAEA,MAAO,CAACxI,EAAkBkI,KACxB,MAAM7H,EAAS/F,KAAK4F,WAAWF,GAC/B,IAAKK,EAAQ,OAEb,MAAMd,EAAiBc,EAAOuI,IAAqB,CAAA,EAC7CC,EAAmBL,GAAgC,iBAAZN,EACzCtG,OAAOkH,YACLlH,OAAOmH,QAAQb,GAASc,IAAI,EAAEN,EAAKC,KAAW,CAC5CD,EACAF,EAAUG,MAGdT,EAEH7H,EAAOuI,GAAmB,IAAKrJ,KAAkBsJ,GAClDvO,KAAKwD,OAER,CA4HO,GAAAuJ,CAAI4B,EAAqB,GAC/B,GAAkB,IAAd3O,KAAK6B,KAAY,CACnB,QAAuBR,IAAnBrB,KAAK8M,WAA2B9M,KAAK8M,WAAa,EAAG,CACvD,MAAM8B,EAAS5O,KAAKD,OAAO0B,QAAQzB,KAAK8M,WACxC9M,KAAKmN,iBAAiByB,EACvB,CACD,MACD,CAED,IAAwB,IAApB5O,KAAK8M,UAAkB,OAET,IAAd9M,KAAK6B,MAAe7B,KAAKgB,QAC3BhB,KAAK6O,8BAGP,MAAMC,EAAgBlC,KAAKC,MAAQ7M,KAAKa,UAClCkO,EAAcnC,KAAKC,MAAQ7M,KAAKc,QACtC,IAAIb,EAAYD,KAAKC,UAErB,GAAkB,IAAdD,KAAK6B,MAAciN,EAAgB9O,KAAKK,iBAAkB,CAC5DL,KAAKkB,IAAM4N,EAAgBH,EAC3B,MAAMK,EAAYhP,KAAKiP,WAAWH,EAAe,EAAG9O,KAAKE,MAAOF,KAAKK,kBAEjE2O,IAAchP,KAAKE,QACrBF,KAAK6B,KAAO,GAEd5B,GAAyB+O,EAAY,GACtC,MAAwB,IAAdhP,KAAK6B,MACd5B,GAAyBD,KAAKE,MAAQ,SAEfmB,IAAnBrB,KAAK8M,WAA2B9M,KAAK8M,WAAa,IACpD9M,KAAK6B,KAAO,EACZ7B,KAAKe,QAAU,EACff,KAAKgB,OAAS,IAEO,IAAdhB,KAAK6B,OACd5B,EAAYD,KAAKkP,YAAYH,EAAa/O,KAAKe,QAASf,KAAKgB,OAAQhB,KAAKO,kBAEtEwO,GAAe/O,KAAKO,mBACtBP,KAAK6B,KAAO,IAIhB7B,KAAKC,UAAYA,EACjBD,KAAKwD,OACLxD,KAAKmP,YAAc1C,sBAAsB,IAAMzM,KAAK+M,IAAI4B,EAAa,GACtE,CAEO,2BAAAE,GACN,MAAM/B,UAAEA,EAAS7L,SAAEA,EAAQhB,UAAEA,GAAcD,KAC3CA,KAAKc,QAAU8L,KAAKC,MACpB,MAAM9L,EAAWf,KAAKe,QAAUd,EAC1BC,EAAQF,KAAKE,MAIbkP,GADgC,EAAhBjM,KAAKkM,SAAe,GAAKrP,KAAKS,gBAClBQ,EAFX,GAEwC,EAC/D,IAAI+M,EAAI,EACNsB,EAAY,EACZC,EAAU,EAEZ,OAASvB,GAAG,CACV,MAAMhN,EAAS,IAAMgN,EAAIlB,EAAa7L,EAAWhB,EAAYmP,EAAYnO,EAAW,EAEpF,IAAI+N,EAAYhP,KAAKkP,YAAYlP,KAAKkB,IAAKH,EAASC,EAAQhB,KAAKO,kBAAoBQ,EAErF,GAAIiO,EAAY9O,EAAO,CACrBF,KAAKgB,OAASd,EAAQoP,EAAYN,EAAY9O,EAAQc,EAASuO,EAC/D,KACD,CAEDA,EAAUvO,EACVsO,EAAYN,CACb,CACF,CAKO,UAAAC,CAAWO,EAAWC,EAAWC,EAAWC,GAClD,OAAOD,GAAKF,GAAKG,GAAKH,EAAIC,CAC3B,CAKO,WAAAP,CAAYM,EAAWC,EAAWC,EAAWC,GACnD,OAAQD,GAAKF,GAAKG,IAAMH,EAAI,GAAKC,CAClC,CAEO,IAAAjM,GACN,MAAMuF,EAAO/I,KAAKD,OAAOgJ,KAEnBe,EAAmBf,EAAuB,GAD1B/I,KAAKD,OAAO2J,eAAiB,GAE7CkG,EAAU9F,EAAmB,EAC7B+F,EAAU/F,EAAmB,EAK7BgG,EAAa/G,EAAO,GAJN/I,KAAKD,OAAOgQ,QAAQhM,OAAS,GAIL,EAEtCiM,EAAeF,GALA9P,KAAKD,OAAOuE,cAAgB,GAOjDtE,KAAK2I,IAAIsH,UAAU,EAAG,EAAGnG,EAAkBA,GAE3C9J,KAAK2I,IAAIuH,OACTlQ,KAAK2I,IAAIwH,UAAUP,EAASC,GAG5B7P,KAAKoQ,oBAAoBN,GAEzB,MAAMO,EAAmBrQ,KAAKC,UAAY,GAAKD,KAAKiB,SAAW,EAAIjB,KAAKW,gBACxEX,KAAK2I,IAAI2H,OAAQD,EAAmBlN,KAAKoN,GAAM,KAE/C,MAAMC,EAAyB,EAAVrN,KAAKoN,GAAUvQ,KAAKD,OAAO0B,QAAQyH,OAExDlJ,KAAKD,OAAO0B,QAAQgE,QAAQ,CAACM,EAAQ0K,KACnC,MAAMC,EAAaD,EAAQD,EAAcA,EAAc,EACjDG,EAAWD,EAAaF,EAG9BxQ,KAAK4Q,WAAW7K,EAAQ2K,EAAYC,EAAUX,KAIhDhQ,KAAK6Q,mBAAmBL,EAAaR,GAErChQ,KAAK2I,IAAImI,UAGT9Q,KAAK+Q,gBAAgBnB,EAASC,EAASC,GAGvC9P,KAAKgR,UAAUpB,EAASC,GAGxB7P,KAAKiR,iBAAiBrB,EAASC,EAChC,CAEO,mBAAAO,CAAoBc,GAC1B,IAAKlR,KAAKmB,OAAOG,aAAetB,KAAK4B,gBAAgBN,WAAY,OAEjEtB,KAAK2I,IAAIuH,OAGTlQ,KAAK2I,IAAIwI,YACTnR,KAAK2I,IAAIyI,IAAI,EAAG,EAAGF,EAAQ,EAAa,EAAV/N,KAAKoN,IACnCvQ,KAAK2I,IAAI0I,OAGT,MAAMC,EAAoB,EAATJ,EAEjBlR,KAAK2I,IAAI4I,UACPvR,KAAKmB,OAAOG,YACX4P,GACAA,EACDI,EACAA,GAGFtR,KAAK2I,IAAImI,SACV,CAEO,UAAAF,CAAW7K,EAAsB2K,EAAoBC,EAAkBO,GAE7ElR,KAAK2I,IAAIwI,YACTnR,KAAK2I,IAAIyI,IAAI,EAAG,EAAGF,EAAQR,EAAYC,GACvC3Q,KAAK2I,IAAI6I,OAAO,EAAG,GACnBxR,KAAK2I,IAAI8I,UAAY1L,EAAO9B,MAC5BjE,KAAK2I,IAAI+I,OAGT1R,KAAK2R,gBAAgB5L,EAAQ2K,EAAYC,EAAUO,GAGnDlR,KAAK4R,uBAAuB7L,EAAQ2K,EAAYC,EAAUO,GAG1DlR,KAAK6R,eAAe9L,EAAQ2K,EAAYC,EAAUO,EACnD,CAKO,oBAAAY,GACN,MAAO,CACL7L,SAAU,GACVhC,MAAO,OACPmC,WAAY,GACZE,SAAU,EACV/C,UAAW,aACXkD,QAAS,EACTC,QAAS,EACTE,UAAW,SACXE,WAAY,QACZC,WAAY,SACZE,WAAY,IAEf,CAKO,mBAAA8K,CAAoBhM,GAE1B,MAAO,IADe/F,KAAK8R,0BACG/L,EAAOF,WACtC,CAKO,cAAAgM,CAAe9L,EAAsB2K,EAAoBC,EAAkBO,GACjF,IAAKnL,EAAOiM,KAAM,OAElB,MAAMnM,EAAa7F,KAAK+R,oBAAoBhM,GACtCyK,EAAcG,EAAWD,EACzBuB,EAAcvB,EAAaF,EAAc,EAE/CxQ,KAAK2I,IAAIuH,OAGTlQ,KAAK2I,IAAI8I,UAAY5L,EAAW5B,MAChCjE,KAAK2I,IAAIuJ,KAAO,GAAGrM,EAAWkB,cAAclB,EAAWI,cAAcJ,EAAWiB,aAChF9G,KAAK2I,IAAIwJ,aAAe,SAGxB,MAAMC,EAAiBlB,EAASrL,EAAWoB,WACrCoL,EAAclP,KAAKmP,IAAIL,GAAeG,EACtCG,EAAcpP,KAAKqP,IAAIP,GAAeG,EAG5CpS,KAAK2I,IAAIwH,UAAUkC,EAAaE,GAGH,eAAzB1M,EAAWtC,UAEbvD,KAAK2I,IAAI2H,OAAO2B,EAAc9O,KAAKoN,GAAK,GAGxCvQ,KAAK2I,IAAI2H,OAAO2B,GAMlB,MAAMQ,EAAkB,EAAIL,EAAiBjP,KAAKqP,IAAIhC,EAAc,GAG9DkC,EAAavP,KAAKC,IAAIyC,EAAWI,SAAW,EAAG,GAC/C0M,EAAiBF,EAAkB,EAAIC,EAGvCE,EAAmB1B,EAASkB,EAAiBM,EAC7CG,EAAkBT,EAAiBM,EACnCI,EAAgE,GAA9C3P,KAAKE,IAAIuP,EAAkBC,GAGnD,IAAIE,EACAC,EAEyB,eAAzBnN,EAAWtC,WAEbwP,EAAelN,EAAWY,QAAUkM,EACpCK,EAAenN,EAAWa,QAAUoM,IAIpCC,EAAelN,EAAWa,QAAUiM,EACpCK,EAAenN,EAAWY,QAAUqM,GAItC9S,KAAK2I,IAAIwH,UAAU4C,EAAcC,GAGjC,MAAMC,aAAEA,EAAYC,cAAEA,GAAkBlT,KAAKmT,kBAAkB3C,EAAa4B,EAAgBvM,EAAWtC,WAGvGvD,KAAKoT,mBAAmBH,EAAcC,EAAerN,EAAWe,WAGhE,MAAMyM,EAAQrT,KAAKsT,mBAAmBvN,EAAOiM,KAAMiB,EAAcpN,GAGjE7F,KAAKuT,gBAAgBF,EAAOxN,EAAYoN,EAAcC,GAEtDlT,KAAK2I,IAAImI,SACV,CAKO,iBAAAqC,CACN3C,EACAU,EACA3N,GAKA,GAAkB,eAAdA,EAA4B,CAI9B,MAAO,CAAE0P,aAFY,EAAI/B,EAAS/N,KAAKqP,IAAIhC,EAAc,GAAK,IAEvC0C,cADQ,GAAThC,EAEvB,CAIC,MAAO,CAAE+B,aAFqB,GAAT/B,EAEEgC,cADD,EAAIhC,EAAS/N,KAAKqP,IAAIhC,EAAc,GAAK,GAGlE,CAKO,kBAAA4C,CAAmBrP,EAAeiE,EAAgBpB,GACxD5G,KAAK2I,IAAIwI,YAITnR,KAAK2I,IAAI8B,MAAM1G,EAAQ,GAAIiE,EAAS,EAAGjE,EAAOiE,GAC9ChI,KAAK2I,IAAI0I,MACV,CAKO,kBAAAiC,CAAmBtB,EAAcwB,EAAkBzT,GACzD,MAAMsT,EAAkB,GACxB,IAAII,EAAc,GAGlB,MAAMC,EAAQC,MAAMC,KAAK5B,GAEzB,IAAK,IAAIhE,EAAI,EAAGA,EAAI0F,EAAMxK,OAAQ8E,IAAK,CACrC,MAAM6F,EAAOH,EAAM1F,GACb8F,EAAWL,EAAcI,EAG/B,GAFgB7T,KAAK2I,IAAIoL,YAAYD,GAEzB/P,MAAQyP,GAA4B,KAAhBC,GAM9B,GAJAJ,EAAMW,KAAKP,EAAYQ,QACvBR,EAAcI,EAGVR,EAAMnK,QAAUnJ,EAAOuG,SAAW,EAAG,CAGvC,MACM4N,EAAuBT,EADPC,EAAMS,MAAMnG,EAAI,GAAGoG,KAAK,IAG9C,GAAIpU,KAAK2I,IAAIoL,YAAYG,GAAsBnQ,MAAQyP,EAAU,CAG/D,IAAIa,EAAYZ,EAChB,IAAK,IAAIa,EAAItG,EAAI,EAAGsG,EAAIZ,EAAMxK,OAAQoL,IAAK,CACzC,MAAMC,EAAWb,EAAMY,GACjBE,EAAeH,EAAYE,EACjC,GAAIvU,KAAK2I,IAAIoL,YAAYS,EAAe,OAAOzQ,MAAQyP,EACrD,MAEFa,GAAaE,CACd,CAED,KAAOvU,KAAK2I,IAAIoL,YAAYM,EAAY,OAAOtQ,MAAQyP,GAAYa,EAAUnL,OAAS,GACpFmL,EAAYA,EAAUF,MAAM,GAAI,GAElCV,EAAcY,EAAY,KAC3B,MACCZ,EAAcS,EAEhBb,EAAMW,KAAKP,EAAYQ,QACvB,KACD,OAEDR,EAAcK,CAEjB,CAOD,OAJIL,EAAYQ,QAAUZ,EAAMnK,OAASnJ,EAAOuG,UAC9C+M,EAAMW,KAAKP,EAAYQ,QAGlBZ,CACR,CAKO,eAAAE,CACNF,EACAtT,EACAyT,EACAiB,GAEA,MACMC,IADcrB,EAAMnK,OAASnJ,EAAOqG,YACZ,EAAIrG,EAAOqG,WAAa,EAEtDiN,EAAM5N,QAAQ,CAACkP,EAAMlE,KACnB,MAAM5F,EAAI6J,EAASjE,EAAQ1Q,EAAOqG,WAGlC,IAAIsE,EAAI,EACiB,SAArB3K,EAAO6G,WACT5G,KAAK2I,IAAI/B,UAAY,OACrB8D,GAAK8I,EAAW,GACc,UAArBzT,EAAO6G,WAChB5G,KAAK2I,IAAI/B,UAAY,QACrB8D,EAAI8I,EAAW,IAEfxT,KAAK2I,IAAI/B,UAAY,SACrB8D,EAAI,GAGN1K,KAAK2I,IAAIiM,SAASD,EAAMjK,EAAGG,IAE9B,CAKO,kBAAAgG,CAAmBL,EAAqBU,GAC9C,MAAM2D,EAAe7U,KAAKD,OAAO+U,aAGjC,GAAID,IAAiBA,EAAa9Q,OAAS,GAAK,EAAG,CACjD,MAAMgR,EAAc/U,KAAKD,OAAO0B,QAAQyH,OAExClJ,KAAK2I,IAAIqM,YAAcH,EAAa5Q,OAAS,OAC7CjE,KAAK2I,IAAIsM,UAAYJ,EAAa9Q,OAAS,EAC3C/D,KAAK2I,IAAIuM,YAAY,IACrBlV,KAAK2I,IAAIwM,QAAU,QACnBnV,KAAK2I,IAAIyM,SAAW,QAGpB,IAAK,IAAI3E,EAAQ,EAAGA,EAAQsE,EAAatE,IAAS,CAChD,MAAM4E,GAAgB5E,EAAQ,GAAKD,EAAcA,EAAc,EAE/DxQ,KAAK2I,IAAIwI,YACTnR,KAAK2I,IAAI2M,OAAO,EAAG,GACnBtV,KAAK2I,IAAI6I,OAAOrO,KAAKmP,IAAI+C,GAAgBnE,EAAQ/N,KAAKqP,IAAI6C,GAAgBnE,GAC1ElR,KAAK2I,IAAI4M,QACV,CACF,CACF,CACO,eAAA5D,CAAgB5L,EAAsB2K,EAAoBC,EAAkBO,GAElF,MAAMvO,EAAQ3C,KAAKmB,OAAOM,QAAQ+T,IAAIzP,EAAOoG,IACvCsJ,EAAWzV,KAAK4B,gBAAgBH,QAAQ+T,IAAIzP,EAAOoG,IAEzD,IAAKxJ,IAAU8S,IAAa1P,EAAOpD,MAAO,OAY1C,IAAI+S,EACAC,EAEJ,GAbA3V,KAAK2I,IAAIuH,OAGTlQ,KAAK2I,IAAIwI,YACTnR,KAAK2I,IAAIyI,IAAI,EAAG,EAAGF,EAAQR,EAAYC,GACvC3Q,KAAK2I,IAAI6I,OAAO,EAAG,GACnBxR,KAAK2I,IAAIiN,YACT5V,KAAK2I,IAAI0I,YAMkBhQ,IAAvB0E,EAAOpD,MAAMoB,YAA+C1C,IAAxB0E,EAAOpD,MAAMqF,OAEnD0N,EAAa3P,EAAOpD,MAAMoB,MAC1B4R,EAAc5P,EAAOpD,MAAMqF,WACtB,CAEL,MAAMwI,EAAcG,EAAWD,EAS/BgF,EANoB,EAAIxE,EAAS/N,KAAKqP,IAAIhC,EAAc,GAOxDmF,EAJqBzE,CAKtB,CAGD,MAAM2E,EAAyB,GAAT3E,EAGhBe,EAAcvB,GAAcC,EAAWD,GAAc,EAGrDoF,EAAS3S,KAAKmP,IAAIL,GAAe4D,EACjCE,EAAS5S,KAAKqP,IAAIP,GAAe4D,EAGvC7V,KAAK2I,IAAIwH,UAAU2F,EAAQC,GAG3B/V,KAAK2I,IAAI2H,OAAO2B,EAAc9O,KAAKoN,GAAK,GAGxCvQ,KAAK2I,IAAI4I,UAAU5O,GAAQ+S,EAAa,GAAIC,EAAc,EAAGD,EAAYC,GAEzE3V,KAAK2I,IAAImI,SACV,CAEO,sBAAAc,CAAuB7L,EAAsB2K,EAAoBC,EAAkBO,GAEzF,IAAKnL,EAAOqB,aAAc,OAE1B,MAAMzE,EAAQ3C,KAAKmB,OAAOQ,eAAe6T,IAAIzP,EAAOoG,IAC9CsJ,EAAWzV,KAAK4B,gBAAgBD,eAAe6T,IAAIzP,EAAOoG,IAEhE,IAAKxJ,IAAU8S,EAAU,OAGzB,IAAoC,IAAhC1P,EAAOqB,aAAaqB,QAAmB,OAE3CzI,KAAK2I,IAAIuH,OAGT,MAAM/I,EAAcnH,KAAKgW,6BAA6BjQ,EAAOqB,cAGvD6K,EAAcvB,GAAcC,EAAWD,GAAc,EAIrDuF,EAAkB/E,EAAS/J,EAAYgB,YACvCkK,EAAclP,KAAKmP,IAAIL,GAAegE,EACtC1D,EAAcpP,KAAKqP,IAAIP,GAAegE,EAGtCC,EAAqB,GAAThF,EAGZiF,GAAuBhT,KAAKqP,IAAIP,GAAhCkE,EAAiDhT,KAAKmP,IAAIL,GAC1DmE,EAAuBjT,KAAKmP,IAAIL,GAAhCmE,EAAiDjT,KAAKqP,IAAIP,GAG1DoE,EAAclP,EAAYV,QAAUyP,EACpCI,EAAenP,EAAYT,QAAUwP,EAErCK,EAASlE,EAAc8D,EAAmBE,EAAcD,EAAoBE,EAC5EE,EAASjE,EAAc4D,EAAmBE,EAAcD,EAAoBE,EAGlFtW,KAAK2I,IAAIwH,UAAUoG,EAAQC,GAG3BxW,KAAK2I,IAAI2H,OAAO2B,EAAe9K,EAAYkB,SAAWlF,KAAKoN,GAAM,KAGjEvQ,KAAK2I,IAAI8N,YAActP,EAAYoB,QAGnCvI,KAAK2I,IAAI4I,UACP5O,GACCwE,EAAYpD,MAAQ,GACpBoD,EAAYa,OAAS,EACtBb,EAAYpD,MACZoD,EAAYa,QAGdhI,KAAK2I,IAAImI,SACV,CAKO,4BAAAkF,CAA6BjW,GACnC,MAAO,CACLsH,IAAKtH,EAAOsH,IACZtD,MAAOhE,EAAOgE,OAAS,GACvBiE,OAAQjI,EAAOiI,QAAU,GACzBvB,QAAS1G,EAAO0G,SAAW,EAC3BC,QAAS3G,EAAO2G,SAAW,EAC3ByB,YAAapI,EAAOoI,aAAe,GACnCE,SAAUtI,EAAOsI,UAAY,EAC7BE,QAASxI,EAAOwI,SAAW,EAC3BE,QAAS1I,EAAO0I,UAAW,EAE9B,CAEO,SAAAuI,CAAUpB,EAAiBC,GACjC,IAAK7P,KAAK4B,gBAAgBR,MAAO,OAEjC,MAAMsV,EAAc1W,KAAKD,OAAOqB,OAAS,CAAA,EACnCuV,EAAc3W,KAAKD,OAAOgJ,KAAQ,EAAI,GAGtC6N,EAAgBF,EAAY9S,UAAY+S,EAM9C,GAJA3W,KAAK2I,IAAIuH,OACTlQ,KAAK2I,IAAIwH,UAAUP,EAASC,GAC5B7P,KAAK2I,IAAI2H,OAAQtQ,KAAKW,gBAAkBwC,KAAKoN,GAAM,KAE/CvQ,KAAKmB,OAAOC,OAASsV,EAAY/T,MAAO,CAE1C,MAAMkU,EAAiBH,EAAYhB,YAAc,GAC3CoB,EAAkBJ,EAAYf,aAAe,GAC7CoB,GAAaL,EAAY3N,MAAQ,IAAM,GAEvCiO,EAAcH,EAAiBE,EAC/BE,EAAeH,EAAkBC,EAEvC/W,KAAK2I,IAAI4I,UACPvR,KAAKmB,OAAOC,OACX4V,EAAc,GACdJ,EAAgBK,EAAe,EAChCD,EACAC,EAEH,KAAM,CAEL,MAAMC,EAAYR,EAAY3N,MAAQ,GAChCoO,EAAaT,EAAYzS,OAAS,OAExCjE,KAAK2I,IAAIwI,YACTnR,KAAK2I,IAAI2M,OAAO,GAAIsB,GACpB5W,KAAK2I,IAAI6I,QAAQ0F,GAAYN,EAA4B,IAAZM,GAC7ClX,KAAK2I,IAAI6I,OAAO0F,GAAYN,EAA4B,IAAZM,GAC5ClX,KAAK2I,IAAIiN,YACT5V,KAAK2I,IAAI8I,UAAY0F,EACrBnX,KAAK2I,IAAI+I,OAGT1R,KAAK2I,IAAIqM,YAAc,OACvBhV,KAAK2I,IAAIsM,UAAY,EACrBjV,KAAK2I,IAAI4M,QACV,CAEDvV,KAAK2I,IAAImI,SACV,CAEO,gBAAAG,CAAiBrB,EAAiBC,GACxC,MAAMrF,EAAqBxK,KAAKD,OAAO6C,aACvC,IAAK4H,IAAqD,IAA/BA,EAAmB/B,QAAmB,OAEjE,IAAKzI,KAAK4B,gBAAgBL,yBAA2BvB,KAAK4B,gBAAgBJ,kBAAmB,OAE7F,IAAI4V,EAAc5M,EAAmBzG,OAAS,GAC1CsT,EAAe7M,EAAmBxC,QAAU,GAChD,MAAMsP,EAAkB9M,EAAmB8M,iBAAmB,OAG9D,IAAIC,EAAiB,EACrB,MAAMxS,EAAkB/E,KAAKkF,qBA0B7B,GAzBIH,EAAgBH,UAElB2S,EAAiB,EAAIpU,KAAKqP,IAAIxS,KAAK8B,2BAA6BiD,EAAgBI,MAChFiS,GAAeG,EACfF,GAAgBE,GAGlBvX,KAAK2I,IAAIuH,OACTlQ,KAAK2I,IAAIwH,UAAUP,EAASC,GAG5B7P,KAAK2I,IAAIwI,YAGLiG,IAAgBC,EAClBrX,KAAK2I,IAAIyI,IAAI,EAAG,EAAGgG,EAAc,EAAG,EAAa,EAAVjU,KAAKoN,IAE5CvQ,KAAK2I,IAAI6O,QAAQ,EAAG,EAAGJ,EAAc,EAAGC,EAAe,EAAG,EAAG,EAAa,EAAVlU,KAAKoN,IAIvEvQ,KAAK2I,IAAI8I,UAAY6F,EACrBtX,KAAK2I,IAAI+I,OAGLlH,EAAmBuF,OAAQ,CAC7B,MAAM0H,EAAcjN,EAAmBuF,OAAOhM,OAAS,EACjD2T,EAAclN,EAAmBuF,OAAO9L,OAAS,OACjD0T,EAAcnN,EAAmBuF,OAAO5L,OAAS,QAEvDnE,KAAK2I,IAAIqM,YAAc0C,EACvB1X,KAAK2I,IAAIsM,UAAYwC,EACrBzX,KAAK2I,IAAIwM,QAAU,QACnBnV,KAAK2I,IAAIyM,SAAW,QAEA,WAAhBuC,EACF3X,KAAK2I,IAAIuM,YAAY,CAAe,EAAduC,EAA+B,EAAdA,IACd,WAAhBE,EACT3X,KAAK2I,IAAIuM,YAAY,CAACuC,EAAaA,IAEnCzX,KAAK2I,IAAIuM,YAAY,IAGvBlV,KAAK2I,IAAI4M,QACV,CAGGvV,KAAKmB,OAAOI,wBAA0BiJ,EAAmBtI,kBAC3DlC,KAAK2I,IAAIuH,OACTlQ,KAAK2I,IAAI0I,OAGTrR,KAAK2I,IAAI4I,UACPvR,KAAKmB,OAAOI,wBACX6V,EAAc,GACdC,EAAe,EAChBD,EACAC,GAGFrX,KAAK2I,IAAImI,WAEPtG,EAAmBpJ,OACrBpB,KAAK4X,sBAAsBpN,EAAmBpJ,OAGhDpB,KAAK2I,IAAImI,SACV,CAEO,qBAAA8G,CAAsBlB,GAC5B,IAAKA,EAAa,OAElB,IAAIQ,EAAYR,EAAY3N,MAAQ,GACpC,MAAMoO,EAAaT,EAAYzS,OAAS,OAClCyC,EAAUgQ,EAAYhQ,SAAW,EAGjC3B,EAAkB/E,KAAKkF,qBAC7B,GAAIH,EAAgBH,QAAS,CAG3BsS,GADuB,EAAI/T,KAAKqP,IAAIxS,KAAK8B,2BAA6BiD,EAAgBI,KAEvF,CASD,GANAnF,KAAK2I,IAAIuH,OAGTlQ,KAAK2I,IAAI2H,OAAQtQ,KAAKW,gBAAkBwC,KAAKoN,GAAM,KACnDvQ,KAAK2I,IAAIwH,UAAU,EAAGzJ,GAElB1G,KAAKmB,OAAOK,mBAAqBkV,EAAY/T,MAAO,CAEtD,MAEMoU,EAAYG,EAAY,GAExBF,GAJiBN,EAAYhB,YAAc,IAIZqB,EAC/BE,GAJkBP,EAAYf,aAAe,IAIZoB,EAEvC/W,KAAK2I,IAAI4I,UACPvR,KAAKmB,OAAOK,mBACXwV,EAAc,GACdC,EAAe,EAChBD,EACAC,EAEH,KAAM,CAELjX,KAAK2I,IAAIwI,YAGT,MAAM0G,EAAWX,EAAY,EAC7BlX,KAAK2I,IAAI2M,OAAO,GAAIuC,GACpB7X,KAAK2I,IAAI6I,OAAmB,IAAXqG,EAAgBA,GACjC7X,KAAK2I,IAAI6I,OAAkB,GAAXqG,EAAgBA,GAChC7X,KAAK2I,IAAIiN,YAET5V,KAAK2I,IAAI8I,UAAY0F,EACrBnX,KAAK2I,IAAI+I,OAGT1R,KAAK2I,IAAIqM,YAAc,OACvBhV,KAAK2I,IAAIsM,UAAY,EACrBjV,KAAK2I,IAAI4M,QACV,CAEDvV,KAAK2I,IAAImI,SACV,CACO,eAAAC,CAAgBnB,EAAiBC,EAAiBqB,GACxD,MAAM4G,EAAe9X,KAAKD,OAAOgQ,OACjC,IAAK+H,EAAc,OAEnB,MAAML,EAAcK,EAAa/T,OAAS,EACpC2T,EAAcI,EAAa7T,OAAS,OACpC0T,EAAcG,EAAa3T,OAAS,QAE1CnE,KAAK2I,IAAIuH,OACTlQ,KAAK2I,IAAIwH,UAAUP,EAASC,GAE5B7P,KAAK2I,IAAIwI,YACTnR,KAAK2I,IAAIyI,IAAI,EAAG,EAAGF,EAAQ,EAAa,EAAV/N,KAAKoN,IACnCvQ,KAAK2I,IAAIqM,YAAc0C,EACvB1X,KAAK2I,IAAIsM,UAAYwC,EAGrBzX,KAAK2I,IAAIwM,QAAU,QACnBnV,KAAK2I,IAAIyM,SAAW,QAGA,WAAhBuC,EACF3X,KAAK2I,IAAIuM,YAAY,CAAe,EAAduC,EAA+B,EAAdA,IACd,WAAhBE,EACT3X,KAAK2I,IAAIuM,YAAY,CAACuC,EAAaA,IAEnCzX,KAAK2I,IAAIuM,YAAY,IAGvBlV,KAAK2I,IAAI4M,SACTvV,KAAK2I,IAAImI,SACV,CAEO,iBAAA1D,GACN,OAAOpN,KAAKD,OAAO0B,QAAQ0B,KAAK4G,MAAM5G,KAAKkM,SAAWrP,KAAKD,OAAO0B,QAAQyH,SAASiD,EACpF,CASD,cAAA4L,CAAerS,EAAkBiC,EAA8BC,GAC7D,MAAM7B,EAAS/F,KAAKD,OAAO0B,QAAQ2K,KAAMmB,GAAMA,EAAEpB,KAAOzG,GACnDK,GAKLA,EAAOpD,MAAQgF,EACX,CACEN,IAAKM,EACL5D,MAAO6D,GAAS7D,MAChBiE,OAAQJ,GAASI,aAEnB3G,EAEAsG,GACF3H,KAAK4B,gBAAgBH,QAAQ+F,IAAI9B,GAAU,GAC3C1F,KAAKoL,qBAELpL,KAAK4B,gBAAgBH,QAAQ+F,IAAI9B,GAAU,GAC3C1F,KAAKmB,OAAOM,QAAQqG,OAAOpC,GAC3B1F,KAAKwD,SAlBLjB,QAAQC,KAAK,UAAUkD,QAoB1B,CAGD,OAAAsS,GACMhY,KAAKmP,aACPxC,qBAAqB3M,KAAKmP,aAI5BnP,KAAK0M,0BAGL1M,KAAKF,OAAOqE,MAAMkG,OAAS,SAC5B,EAriDuBzK,EAAAO,SAAW,CACjCC,MAAO,GACPE,kBAAmB,KACnBE,kBAAmB,KACnBE,kBAAmB,GACnBE,iBAAkB,EAClBM,IAAK,KACLoL,gBAAiB,KACjB2L,SAAU,IACVC,iBAAkB,GAClBC,sBAAuB,GACvBC,oBAAqB,GACrBC,cAAe,CACbC,cAAe,GACfC,eAAgB,GAChBC,cAAe,OACfC,mBAAoB,GACpBC,oBAAqB,QAEvBC,MAAO,CACLC,aAAc,GACdJ,cAAe,OACfK,oBAAqB,GACrBC,qBAAsB,IAExBC,OAAQ,CACNC,qBAAsB,EACtBC,qBAAsB,OACtBC,cAAe,CACbZ,cAAe,GACfC,eAAgB,GAChBY,eAAgB,GAChBC,gBAAiB"}